
STM32H723ZGT6_HAL_CMake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000841c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008768  08008768  00009768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008770  08008770  00009770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008774  08008774  00009774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08008778  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c34  24000064  080087dc  0000a064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c98  080087dc  0000ac98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020b72  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004125  00000000  00000000  0002ac04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018e8  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000134e  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a42  00000000  00000000  00031966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f60f  00000000  00000000  000673a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158ac5  00000000  00000000  000869b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001df47c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006af8  00000000  00000000  001df4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001e5fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080086d4 	.word	0x080086d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	080086d4 	.word	0x080086d4

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StartLED_Task, NULL, &ledTask_attributes);
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <MX_FREERTOS_Init+0x18>)
 8000606:	2100      	movs	r1, #0
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_FREERTOS_Init+0x1c>)
 800060a:	f005 fa17 	bl	8005a3c <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a03      	ldr	r2, [pc, #12]	@ (8000620 <MX_FREERTOS_Init+0x20>)
 8000612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	0800870c 	.word	0x0800870c
 800061c:	08000625 	.word	0x08000625
 8000620:	24000080 	.word	0x24000080

08000624 <StartLED_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLED_Task */
void StartLED_Task(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Task */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	4808      	ldr	r0, [pc, #32]	@ (8000654 <StartLED_Task+0x30>)
 8000632:	f000 fef5 	bl	8001420 <HAL_GPIO_WritePin>
    osDelay(500);
 8000636:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063a:	f005 fa91 	bl	8005b60 <osDelay>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <StartLED_Task+0x30>)
 8000644:	f000 feec 	bl	8001420 <HAL_GPIO_WritePin>
    osDelay(500);
 8000648:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800064c:	f005 fa88 	bl	8005b60 <osDelay>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000650:	bf00      	nop
 8000652:	e7eb      	b.n	800062c <StartLED_Task+0x8>
 8000654:	58021800 	.word	0x58021800

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xbc>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <MX_GPIO_Init+0xbc>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067e:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <MX_GPIO_Init+0xbc>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <MX_GPIO_Init+0xbc>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000692:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xbc>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069c:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <MX_GPIO_Init+0xbc>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_GPIO_Init+0xbc>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b0:	4a18      	ldr	r2, [pc, #96]	@ (8000714 <MX_GPIO_Init+0xbc>)
 80006b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_GPIO_Init+0xbc>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_GPIO_Init+0xbc>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ce:	4a11      	ldr	r2, [pc, #68]	@ (8000714 <MX_GPIO_Init+0xbc>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_GPIO_Init+0xbc>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2180      	movs	r1, #128	@ 0x80
 80006ea:	480b      	ldr	r0, [pc, #44]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006ec:	f000 fe98 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000708:	f000 fce2 	bl	80010d0 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	@ 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58024400 	.word	0x58024400
 8000718:	58021800 	.word	0x58021800

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000720:	f000 f87e 	bl	8000820 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fb60 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f80c 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff94 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000730:	f000 f9f0 	bl	8000b14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000734:	f005 f938 	bl	80059a8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000738:	f7ff ff62 	bl	8000600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800073c:	f005 f958 	bl	80059f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <main+0x24>

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	@ 0x70
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074e:	224c      	movs	r2, #76	@ 0x4c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fee4 	bl	8008520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 fede 	bl	8008520 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000764:	2002      	movs	r0, #2
 8000766:	f000 fe75 	bl	8001454 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <SystemClock_Config+0xd8>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a2a      	ldr	r2, [pc, #168]	@ (800081c <SystemClock_Config+0xd8>)
 8000774:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <SystemClock_Config+0xd8>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000786:	bf00      	nop
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemClock_Config+0xd8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000794:	d1f8      	bne.n	8000788 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000796:	2301      	movs	r3, #1
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80007ac:	232c      	movs	r3, #44	@ 0x2c
 80007ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007b4:	2305      	movs	r3, #5
 80007b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007bc:	230c      	movs	r3, #12
 80007be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fe7b 	bl	80014c8 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 f83e 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	233f      	movs	r3, #63	@ 0x3f
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2303      	movs	r3, #3
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e8:	2308      	movs	r3, #8
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ec:	2340      	movs	r3, #64	@ 0x40
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2103      	movs	r1, #3
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa3a 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800080e:	f000 f823 	bl	8000858 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3770      	adds	r7, #112	@ 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58024800 	.word	0x58024800

08000820 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000824:	f000 fc1c 	bl	8001060 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fc31 	bl	8001090 <HAL_MPU_Enable>

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 fb0b 	bl	8000e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40001000 	.word	0x40001000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x38>)
 800086c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_MspInit+0x38>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_MspInit+0x38>)
 800087c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	210f      	movs	r1, #15
 800088c:	f06f 0001 	mvn.w	r0, #1
 8000890:	f000 fbbe 	bl	8001010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	58024400 	.word	0x58024400

080008a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	@ 0x40
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b0f      	cmp	r3, #15
 80008ac:	d827      	bhi.n	80008fe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	2036      	movs	r0, #54	@ 0x36
 80008b4:	f000 fbac 	bl	8001010 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b8:	2036      	movs	r0, #54	@ 0x36
 80008ba:	f000 fbc3 	bl	8001044 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80008be:	4a29      	ldr	r2, [pc, #164]	@ (8000964 <HAL_InitTick+0xc4>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <HAL_InitTick+0xc8>)
 80008c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008ca:	4a27      	ldr	r2, [pc, #156]	@ (8000968 <HAL_InitTick+0xc8>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <HAL_InitTick+0xc8>)
 80008d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e2:	f107 0210 	add.w	r2, r7, #16
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fd51 	bl	8002394 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d106      	bne.n	800090a <HAL_InitTick+0x6a>
 80008fc:	e001      	b.n	8000902 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e02b      	b.n	800095a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000902:	f001 fd1b 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 8000906:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000908:	e004      	b.n	8000914 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090a:	f001 fd17 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 800090e:	4603      	mov	r3, r0
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000916:	4a15      	ldr	r2, [pc, #84]	@ (800096c <HAL_InitTick+0xcc>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <HAL_InitTick+0xd0>)
 8000924:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <HAL_InitTick+0xd4>)
 8000926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_InitTick+0xd0>)
 800092a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000930:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <HAL_InitTick+0xd0>)
 8000932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000934:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_InitTick+0xd0>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_InitTick+0xd0>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000942:	480b      	ldr	r0, [pc, #44]	@ (8000970 <HAL_InitTick+0xd0>)
 8000944:	f003 fb2a 	bl	8003f9c <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d104      	bne.n	8000958 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800094e:	4808      	ldr	r0, [pc, #32]	@ (8000970 <HAL_InitTick+0xd0>)
 8000950:	f003 fb86 	bl	8004060 <HAL_TIM_Base_Start_IT>
 8000954:	4603      	mov	r3, r0
 8000956:	e000      	b.n	800095a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	3740      	adds	r7, #64	@ 0x40
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000008 	.word	0x24000008
 8000968:	58024400 	.word	0x58024400
 800096c:	431bde83 	.word	0x431bde83
 8000970:	24000084 	.word	0x24000084
 8000974:	40001000 	.word	0x40001000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <TIM6_DAC_IRQHandler+0x10>)
 80009b6:	f003 fbd9 	bl	800416c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	24000084 	.word	0x24000084

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <SystemInit+0x100>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac4 <SystemInit+0x100>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac8 <SystemInit+0x104>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d807      	bhi.n	80009f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e4:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <SystemInit+0x104>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 030f 	bic.w	r3, r3, #15
 80009ec:	4a36      	ldr	r2, [pc, #216]	@ (8000ac8 <SystemInit+0x104>)
 80009ee:	f043 0307 	orr.w	r3, r3, #7
 80009f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f4:	4b35      	ldr	r3, [pc, #212]	@ (8000acc <SystemInit+0x108>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a34      	ldr	r2, [pc, #208]	@ (8000acc <SystemInit+0x108>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a00:	4b32      	ldr	r3, [pc, #200]	@ (8000acc <SystemInit+0x108>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <SystemInit+0x108>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4930      	ldr	r1, [pc, #192]	@ (8000acc <SystemInit+0x108>)
 8000a0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <SystemInit+0x10c>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <SystemInit+0x104>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <SystemInit+0x104>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f023 030f 	bic.w	r3, r3, #15
 8000a26:	4a28      	ldr	r2, [pc, #160]	@ (8000ac8 <SystemInit+0x104>)
 8000a28:	f043 0307 	orr.w	r3, r3, #7
 8000a2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <SystemInit+0x108>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <SystemInit+0x108>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a3a:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemInit+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <SystemInit+0x108>)
 8000a42:	4a24      	ldr	r2, [pc, #144]	@ (8000ad4 <SystemInit+0x110>)
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <SystemInit+0x108>)
 8000a48:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <SystemInit+0x114>)
 8000a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <SystemInit+0x108>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <SystemInit+0x118>)
 8000a50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <SystemInit+0x108>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <SystemInit+0x108>)
 8000a5a:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <SystemInit+0x118>)
 8000a5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <SystemInit+0x108>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <SystemInit+0x108>)
 8000a66:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <SystemInit+0x118>)
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <SystemInit+0x108>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <SystemInit+0x108>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <SystemInit+0x108>)
 8000a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <SystemInit+0x108>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <SystemInit+0x108>)
 8000a84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d113      	bne.n	8000ab8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <SystemInit+0x108>)
 8000a92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a96:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <SystemInit+0x108>)
 8000a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <SystemInit+0x11c>)
 8000aa2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000aa6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <SystemInit+0x108>)
 8000aaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000aae:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <SystemInit+0x108>)
 8000ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ab4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	52002000 	.word	0x52002000
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ad4:	02020200 	.word	0x02020200
 8000ad8:	01ff0000 	.word	0x01ff0000
 8000adc:	01010280 	.word	0x01010280
 8000ae0:	52004000 	.word	0x52004000

08000ae4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <ExitRun0Mode+0x2c>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <ExitRun0Mode+0x2c>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000af4:	bf00      	nop
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <ExitRun0Mode+0x2c>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f9      	beq.n	8000af6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	58024800 	.word	0x58024800

08000b14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <MX_USART1_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b5e:	f003 fcff 	bl	8004560 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f7ff fe76 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b70:	f004 fe0b 	bl	800578a <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f7ff fe6d 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b82:	f004 fe40 	bl	8005806 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f7ff fe64 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_USART1_UART_Init+0x90>)
 8000b92:	f004 fdc1 	bl	8005718 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f7ff fe5c 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	240000d0 	.word	0x240000d0
 8000ba8:	40011000 	.word	0x40011000

08000bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0b8      	sub	sp, #224	@ 0xe0
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	22b8      	movs	r2, #184	@ 0xb8
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 fca7 	bl	8008520 <memset>
  if(uartHandle->Instance==USART1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <HAL_UART_MspInit+0xc8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d146      	bne.n	8000c6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bdc:	f04f 0201 	mov.w	r2, #1
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fc10 	bl	8002418 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bfe:	f7ff fe2b 	bl	8000858 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_UART_MspInit+0xcc>)
 8000c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <HAL_UART_MspInit+0xcc>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_UART_MspInit+0xcc>)
 8000c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_UART_MspInit+0xcc>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <HAL_UART_MspInit+0xcc>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_UART_MspInit+0xcc>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <HAL_UART_MspInit+0xd0>)
 8000c66:	f000 fa33 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	37e0      	adds	r7, #224	@ 0xe0
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40011000 	.word	0x40011000
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	58020000 	.word	0x58020000

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cbc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c84:	f7ff ff2e 	bl	8000ae4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c88:	f7ff fe9c 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f007 fc93 	bl	80085dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fd31 	bl	800071c <main>
  bx  lr
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000cc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cc4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000cc8:	08008778 	.word	0x08008778
  ldr r2, =_sbss
 8000ccc:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000cd0:	24004c98 	.word	0x24004c98

08000cd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC3_IRQHandler>

08000cd6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
 8000ce8:	f7ff fdb6 	bl	8000858 <Error_Handler>
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a1b      	ldrb	r3, [r3, #8]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d905      	bls.n	8000d04 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
 8000cfc:	f7ff fdac 	bl	8000858 <Error_Handler>
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7a1b      	ldrb	r3, [r3, #8]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	b2d1      	uxtb	r1, r2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	7211      	strb	r1, [r2, #8]
 8000d10:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000d12:	f3ef 8211 	mrs	r2, BASEPRI
 8000d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d1a:	f383 8811 	msr	BASEPRI, r3
 8000d1e:	f3bf 8f6f 	isb	sy
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	60fa      	str	r2, [r7, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
 8000d4c:	f7ff fd84 	bl	8000858 <Error_Handler>
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7a1b      	ldrb	r3, [r3, #8]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7a1b      	ldrb	r3, [r3, #8]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d905      	bls.n	8000d74 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
 8000d6c:	f7ff fd74 	bl	8000858 <Error_Handler>
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7a1b      	ldrb	r3, [r3, #8]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000d88:	bf00      	nop
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d105      	bne.n	8000dac <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
 8000da4:	f7ff fd58 	bl	8000858 <Error_Handler>
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff91 	bl	8000cd6 <stm32_lock_acquire>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000dca:	b672      	cpsid	i
}
 8000dcc:	bf00      	nop
 8000dce:	f7ff fd43 	bl	8000858 <Error_Handler>
 8000dd2:	bf00      	nop
 8000dd4:	e7fd      	b.n	8000dd2 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffae 	bl	8000d3a <stm32_lock_release>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f903 	bl	8000ffa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000df4:	f001 f8f8 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	@ (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f7ff fd34 	bl	80008a0 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fd0f 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	08008730 	.word	0x08008730
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2400000c 	.word	0x2400000c
 8000e84:	24000170 	.word	0x24000170

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	24000170 	.word	0x24000170

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4c 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800101e:	f7ff ff63 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001022:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f7ff ffb3 	bl	8000f94 <NVIC_EncodePriority>
 800102e:	4602      	mov	r2, r0
 8001030:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff82 	bl	8000f40 <__NVIC_SetPriority>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff56 	bl	8000f04 <__NVIC_EnableIRQ>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001064:	f3bf 8f5f 	dmb	sy
}
 8001068:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <HAL_MPU_Disable+0x28>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_MPU_Disable+0x28>)
 8001070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001074:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_MPU_Disable+0x2c>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000ed90 	.word	0xe000ed90

08001090 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_MPU_Enable+0x38>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_MPU_Enable+0x3c>)
 80010a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a6:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <HAL_MPU_Enable+0x3c>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010ae:	f3bf 8f4f 	dsb	sy
}
 80010b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010b4:	f3bf 8f6f 	isb	sy
}
 80010b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed90 	.word	0xe000ed90
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010de:	4b86      	ldr	r3, [pc, #536]	@ (80012f8 <HAL_GPIO_Init+0x228>)
 80010e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010e2:	e18c      	b.n	80013fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	2101      	movs	r1, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 817e 	beq.w	80013f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d005      	beq.n	8001114 <HAL_GPIO_Init+0x44>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d130      	bne.n	8001176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114a:	2201      	movs	r2, #1
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f003 0201 	and.w	r2, r3, #1
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b03      	cmp	r3, #3
 8001180:	d017      	beq.n	80011b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d123      	bne.n	8001206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	69b9      	ldr	r1, [r7, #24]
 8001202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0203 	and.w	r2, r3, #3
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80d8 	beq.w	80013f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <HAL_GPIO_Init+0x22c>)
 800124a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800124e:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <HAL_GPIO_Init+0x22c>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <HAL_GPIO_Init+0x22c>)
 800125a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001266:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <HAL_GPIO_Init+0x230>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_GPIO_Init+0x234>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d04a      	beq.n	8001328 <HAL_GPIO_Init+0x258>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <HAL_GPIO_Init+0x238>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x222>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1b      	ldr	r2, [pc, #108]	@ (800130c <HAL_GPIO_Init+0x23c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x21e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001310 <HAL_GPIO_Init+0x240>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_GPIO_Init+0x244>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_GPIO_Init+0x248>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a17      	ldr	r2, [pc, #92]	@ (800131c <HAL_GPIO_Init+0x24c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <HAL_GPIO_Init+0x250>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x20a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_GPIO_Init+0x254>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x206>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e029      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012d6:	230a      	movs	r3, #10
 80012d8:	e027      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012da:	2307      	movs	r3, #7
 80012dc:	e025      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012de:	2306      	movs	r3, #6
 80012e0:	e023      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e021      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e01f      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e01d      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e01b      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e019      	b.n	800132a <HAL_GPIO_Init+0x25a>
 80012f6:	bf00      	nop
 80012f8:	58000080 	.word	0x58000080
 80012fc:	58024400 	.word	0x58024400
 8001300:	58000400 	.word	0x58000400
 8001304:	58020000 	.word	0x58020000
 8001308:	58020400 	.word	0x58020400
 800130c:	58020800 	.word	0x58020800
 8001310:	58020c00 	.word	0x58020c00
 8001314:	58021000 	.word	0x58021000
 8001318:	58021400 	.word	0x58021400
 800131c:	58021800 	.word	0x58021800
 8001320:	58021c00 	.word	0x58021c00
 8001324:	58022400 	.word	0x58022400
 8001328:	2300      	movs	r3, #0
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4093      	lsls	r3, r2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133a:	4938      	ldr	r1, [pc, #224]	@ (800141c <HAL_GPIO_Init+0x34c>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800136e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800139c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f ae6b 	bne.w	80010e4 <HAL_GPIO_Init+0x14>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3724      	adds	r7, #36	@ 0x24
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	58000400 	.word	0x58000400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_PWREx_ConfigSupply+0x70>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00a      	beq.n	800147e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_PWREx_ConfigSupply+0x70>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e01f      	b.n	80014ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e01d      	b.n	80014ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_PWREx_ConfigSupply+0x70>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	490f      	ldr	r1, [pc, #60]	@ (80014c4 <HAL_PWREx_ConfigSupply+0x70>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800148e:	f7ff fcfb 	bl	8000e88 <HAL_GetTick>
 8001492:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001494:	e009      	b.n	80014aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001496:	f7ff fcf7 	bl	8000e88 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014a4:	d901      	bls.n	80014aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_PWREx_ConfigSupply+0x70>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014b6:	d1ee      	bne.n	8001496 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	58024800 	.word	0x58024800

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	@ 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e3c8      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e8:	4b88      	ldr	r3, [pc, #544]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f2:	4b86      	ldr	r3, [pc, #536]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80014f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d007      	beq.n	800150e <HAL_RCC_OscConfig+0x46>
 80014fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001500:	2b18      	cmp	r3, #24
 8001502:	d110      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
 8001504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	4b7f      	ldr	r3, [pc, #508]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d06c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x12c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d168      	bne.n	80015f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3a2      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x76>
 8001530:	4b76      	ldr	r3, [pc, #472]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a75      	ldr	r2, [pc, #468]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e02e      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b71      	ldr	r3, [pc, #452]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a70      	ldr	r2, [pc, #448]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6e      	ldr	r3, [pc, #440]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6d      	ldr	r2, [pc, #436]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0xbc>
 800156a:	4b68      	ldr	r3, [pc, #416]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a67      	ldr	r2, [pc, #412]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b65      	ldr	r3, [pc, #404]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a64      	ldr	r2, [pc, #400]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001584:	4b61      	ldr	r3, [pc, #388]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a60      	ldr	r2, [pc, #384]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b5e      	ldr	r3, [pc, #376]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a5d      	ldr	r2, [pc, #372]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc70 	bl	8000e88 <HAL_GetTick>
 80015a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fc6c 	bl	8000e88 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e356      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015be:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xe4>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc5c 	bl	8000e88 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fc58 	bl	8000e88 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e342      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015e6:	4b49      	ldr	r3, [pc, #292]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x10c>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 808c 	beq.w	800171c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001604:	4b41      	ldr	r3, [pc, #260]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800160c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_RCC_OscConfig+0x162>
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	2b18      	cmp	r3, #24
 800161e:	d137      	bne.n	8001690 <HAL_RCC_OscConfig+0x1c8>
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d132      	bne.n	8001690 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162a:	4b38      	ldr	r3, [pc, #224]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x17a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e314      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001642:	4b32      	ldr	r3, [pc, #200]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0219 	bic.w	r2, r3, #25
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	492f      	ldr	r1, [pc, #188]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fc18 	bl	8000e88 <HAL_GetTick>
 8001658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165c:	f7ff fc14 	bl	8000e88 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e2fe      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	061b      	lsls	r3, r3, #24
 8001688:	4920      	ldr	r1, [pc, #128]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800168e:	e045      	b.n	800171c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d026      	beq.n	80016e6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 0219 	bic.w	r2, r3, #25
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4919      	ldr	r1, [pc, #100]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff fbed 	bl	8000e88 <HAL_GetTick>
 80016ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fbe9 	bl	8000e88 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e2d3      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	490b      	ldr	r1, [pc, #44]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
 80016e4:	e01a      	b.n	800171c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <HAL_RCC_OscConfig+0x244>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fbc9 	bl	8000e88 <HAL_GetTick>
 80016f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fbc5 	bl	8000e88 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d903      	bls.n	8001710 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e2af      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
 800170c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001710:	4b96      	ldr	r3, [pc, #600]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d06a      	beq.n	80017fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001728:	4b90      	ldr	r3, [pc, #576]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001730:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001732:	4b8e      	ldr	r3, [pc, #568]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d007      	beq.n	800174e <HAL_RCC_OscConfig+0x286>
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b18      	cmp	r3, #24
 8001742:	d11b      	bne.n	800177c <HAL_RCC_OscConfig+0x2b4>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800174e:	4b87      	ldr	r3, [pc, #540]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x29e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	2b80      	cmp	r3, #128	@ 0x80
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e282      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001766:	4b81      	ldr	r3, [pc, #516]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	061b      	lsls	r3, r3, #24
 8001774:	497d      	ldr	r1, [pc, #500]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800177a:	e040      	b.n	80017fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d023      	beq.n	80017cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001784:	4b79      	ldr	r3, [pc, #484]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a78      	ldr	r2, [pc, #480]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800178a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fb7a 	bl	8000e88 <HAL_GetTick>
 8001794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001798:	f7ff fb76 	bl	8000e88 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e260      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017aa:	4b70      	ldr	r3, [pc, #448]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017b6:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	061b      	lsls	r3, r3, #24
 80017c4:	4969      	ldr	r1, [pc, #420]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60cb      	str	r3, [r1, #12]
 80017ca:	e018      	b.n	80017fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017cc:	4b67      	ldr	r3, [pc, #412]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a66      	ldr	r2, [pc, #408]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80017d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb56 	bl	8000e88 <HAL_GetTick>
 80017dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017e0:	f7ff fb52 	bl	8000e88 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e23c      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017f2:	4b5e      	ldr	r3, [pc, #376]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d019      	beq.n	8001846 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b56      	ldr	r3, [pc, #344]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001816:	4a55      	ldr	r2, [pc, #340]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fb33 	bl	8000e88 <HAL_GetTick>
 8001822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fb2f 	bl	8000e88 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e219      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001838:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x35e>
 8001844:	e018      	b.n	8001878 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800184a:	4a48      	ldr	r2, [pc, #288]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fb19 	bl	8000e88 <HAL_GetTick>
 8001856:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fb15 	bl	8000e88 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1ff      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800186c:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d036      	beq.n	80018f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d019      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800188c:	4b37      	ldr	r3, [pc, #220]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a36      	ldr	r2, [pc, #216]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001892:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001896:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001898:	f7ff faf6 	bl	8000e88 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a0:	f7ff faf2 	bl	8000e88 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1dc      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018b2:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3d8>
 80018be:	e018      	b.n	80018f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a29      	ldr	r2, [pc, #164]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80018c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fadc 	bl	8000e88 <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d4:	f7ff fad8 	bl	8000e88 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1c2      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8086 	beq.w	8001a0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x4a8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1a      	ldr	r2, [pc, #104]	@ (8001970 <HAL_RCC_OscConfig+0x4a8>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800190c:	f7ff fabc 	bl	8000e88 <HAL_GetTick>
 8001910:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001914:	f7ff fab8 	bl	8000e88 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1a2      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_RCC_OscConfig+0x4a8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x480>
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193e:	4a0b      	ldr	r2, [pc, #44]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6713      	str	r3, [r2, #112]	@ 0x70
 8001946:	e032      	b.n	80019ae <HAL_RCC_OscConfig+0x4e6>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <HAL_RCC_OscConfig+0x4ac>
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001954:	4a05      	ldr	r2, [pc, #20]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	@ 0x70
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a02      	ldr	r2, [pc, #8]	@ (800196c <HAL_RCC_OscConfig+0x4a4>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
 8001968:	e021      	b.n	80019ae <HAL_RCC_OscConfig+0x4e6>
 800196a:	bf00      	nop
 800196c:	58024400 	.word	0x58024400
 8001970:	58024800 	.word	0x58024800
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x4ce>
 800197c:	4b83      	ldr	r3, [pc, #524]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001980:	4a82      	ldr	r2, [pc, #520]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	@ 0x70
 8001988:	4b80      	ldr	r3, [pc, #512]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	@ 0x70
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x4e6>
 8001996:	4b7d      	ldr	r3, [pc, #500]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a2:	4b7a      	ldr	r3, [pc, #488]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	4a79      	ldr	r2, [pc, #484]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d015      	beq.n	80019e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fa67 	bl	8000e88 <HAL_GetTick>
 80019ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fa63 	bl	8000e88 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e14b      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d4:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCC_OscConfig+0x4f6>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fa51 	bl	8000e88 <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fa4d 	bl	8000e88 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e135      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a00:	4b62      	ldr	r3, [pc, #392]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 812a 	beq.w	8001c6a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	f000 80ba 	beq.w	8001b98 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	f040 8095 	bne.w	8001b58 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b57      	ldr	r3, [pc, #348]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a56      	ldr	r2, [pc, #344]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fa25 	bl	8000e88 <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff fa21 	bl	8000e88 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e10b      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a54:	4b4d      	ldr	r3, [pc, #308]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a60:	4b4a      	ldr	r3, [pc, #296]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a64:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_RCC_OscConfig+0x6c8>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	430a      	orrs	r2, r1
 8001a74:	4945      	ldr	r1, [pc, #276]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a94:	3b01      	subs	r3, #1
 8001a96:	041b      	lsls	r3, r3, #16
 8001a98:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001aaa:	4938      	ldr	r1, [pc, #224]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ab0:	4b36      	ldr	r3, [pc, #216]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	4a35      	ldr	r2, [pc, #212]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001abc:	4b33      	ldr	r3, [pc, #204]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac0:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_RCC_OscConfig+0x6cc>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ac8:	00d2      	lsls	r2, r2, #3
 8001aca:	4930      	ldr	r1, [pc, #192]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	f023 020c 	bic.w	r2, r3, #12
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	492b      	ldr	r1, [pc, #172]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	f023 0202 	bic.w	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4927      	ldr	r1, [pc, #156]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001af4:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	4a24      	ldr	r2, [pc, #144]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	4a21      	ldr	r2, [pc, #132]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b18:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f9aa 	bl	8000e88 <HAL_GetTick>
 8001b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f9a6 	bl	8000e88 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e090      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x670>
 8001b56:	e088      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f990 	bl	8000e88 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f98c 	bl	8000e88 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e076      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b7e:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_RCC_OscConfig+0x6c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x6a4>
 8001b8a:	e06e      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a2>
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	fffffc0c 	.word	0xfffffc0c
 8001b94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b98:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b9e:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d031      	beq.n	8001c10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d12a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d122      	bne.n	8001c10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d11a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0a5b      	lsrs	r3, r3, #9
 8001bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d111      	bne.n	8001c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	0e1b      	lsrs	r3, r3, #24
 8001c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e02b      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d01f      	beq.n	8001c6a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	4a11      	ldr	r2, [pc, #68]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c36:	f7ff f927 	bl	8000e88 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c3c:	bf00      	nop
 8001c3e:	f7ff f923 	bl	8000e88 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d0f9      	beq.n	8001c3e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_RCC_OscConfig+0x7b0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	4906      	ldr	r1, [pc, #24]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_RCC_OscConfig+0x7ac>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3730      	adds	r7, #48	@ 0x30
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58024400 	.word	0x58024400
 8001c78:	ffff0007 	.word	0xffff0007

08001c7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e19c      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b8a      	ldr	r3, [pc, #552]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b87      	ldr	r3, [pc, #540]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 020f 	bic.w	r2, r3, #15
 8001ca6:	4985      	ldr	r1, [pc, #532]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b83      	ldr	r3, [pc, #524]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e184      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d908      	bls.n	8001cee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cdc:	4b78      	ldr	r3, [pc, #480]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4975      	ldr	r1, [pc, #468]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	4b70      	ldr	r3, [pc, #448]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d908      	bls.n	8001d1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	496a      	ldr	r1, [pc, #424]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	4b64      	ldr	r3, [pc, #400]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d908      	bls.n	8001d4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d38:	4b61      	ldr	r3, [pc, #388]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	495e      	ldr	r1, [pc, #376]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d010      	beq.n	8001d78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	4b59      	ldr	r3, [pc, #356]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d66:	4b56      	ldr	r3, [pc, #344]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4953      	ldr	r1, [pc, #332]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d908      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f023 020f 	bic.w	r2, r3, #15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4947      	ldr	r1, [pc, #284]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d055      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001db2:	4b43      	ldr	r3, [pc, #268]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4940      	ldr	r1, [pc, #256]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d121      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0f6      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001de4:	4b36      	ldr	r3, [pc, #216]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d115      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0ea      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dfc:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0de      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d6      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f023 0207 	bic.w	r2, r3, #7
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4925      	ldr	r1, [pc, #148]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2e:	f7ff f82b 	bl	8000e88 <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7ff f827 	bl	8000e88 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0be      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d1eb      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d208      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f023 020f 	bic.w	r2, r3, #15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	490e      	ldr	r1, [pc, #56]	@ (8001ec0 <HAL_RCC_ClockConfig+0x244>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d214      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	4906      	ldr	r1, [pc, #24]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <HAL_RCC_ClockConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e086      	b.n	8001fca <HAL_RCC_ClockConfig+0x34e>
 8001ebc:	52002000 	.word	0x52002000
 8001ec0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d208      	bcs.n	8001ef2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4939      	ldr	r1, [pc, #228]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d010      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d208      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	492e      	ldr	r1, [pc, #184]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d208      	bcs.n	8001f4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4922      	ldr	r1, [pc, #136]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d010      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d208      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4917      	ldr	r1, [pc, #92]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f7c:	f000 f834 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	4912      	ldr	r1, [pc, #72]	@ (8001fd8 <HAL_RCC_ClockConfig+0x35c>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_RCC_ClockConfig+0x358>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_RCC_ClockConfig+0x35c>)
 8001fa4:	5cd3      	ldrb	r3, [r2, r3]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_RCC_ClockConfig+0x360>)
 8001fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_RCC_ClockConfig+0x364>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_RCC_ClockConfig+0x368>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fc6e 	bl	80008a0 <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	08008730 	.word	0x08008730
 8001fdc:	24000004 	.word	0x24000004
 8001fe0:	24000000 	.word	0x24000000
 8001fe4:	24000008 	.word	0x24000008

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fee:	4bb3      	ldr	r3, [pc, #716]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ff6:	2b18      	cmp	r3, #24
 8001ff8:	f200 8155 	bhi.w	80022a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002069 	.word	0x08002069
 8002008:	080022a7 	.word	0x080022a7
 800200c:	080022a7 	.word	0x080022a7
 8002010:	080022a7 	.word	0x080022a7
 8002014:	080022a7 	.word	0x080022a7
 8002018:	080022a7 	.word	0x080022a7
 800201c:	080022a7 	.word	0x080022a7
 8002020:	080022a7 	.word	0x080022a7
 8002024:	0800208f 	.word	0x0800208f
 8002028:	080022a7 	.word	0x080022a7
 800202c:	080022a7 	.word	0x080022a7
 8002030:	080022a7 	.word	0x080022a7
 8002034:	080022a7 	.word	0x080022a7
 8002038:	080022a7 	.word	0x080022a7
 800203c:	080022a7 	.word	0x080022a7
 8002040:	080022a7 	.word	0x080022a7
 8002044:	08002095 	.word	0x08002095
 8002048:	080022a7 	.word	0x080022a7
 800204c:	080022a7 	.word	0x080022a7
 8002050:	080022a7 	.word	0x080022a7
 8002054:	080022a7 	.word	0x080022a7
 8002058:	080022a7 	.word	0x080022a7
 800205c:	080022a7 	.word	0x080022a7
 8002060:	080022a7 	.word	0x080022a7
 8002064:	0800209b 	.word	0x0800209b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002068:	4b94      	ldr	r3, [pc, #592]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002074:	4b91      	ldr	r3, [pc, #580]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	4a90      	ldr	r2, [pc, #576]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002086:	e111      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002088:	4b8d      	ldr	r3, [pc, #564]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800208a:	61bb      	str	r3, [r7, #24]
      break;
 800208c:	e10e      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800208e:	4b8d      	ldr	r3, [pc, #564]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002090:	61bb      	str	r3, [r7, #24]
      break;
 8002092:	e10b      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002094:	4b8c      	ldr	r3, [pc, #560]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002096:	61bb      	str	r3, [r7, #24]
      break;
 8002098:	e108      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800209a:	4b88      	ldr	r3, [pc, #544]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020a4:	4b85      	ldr	r3, [pc, #532]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020b0:	4b82      	ldr	r3, [pc, #520]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020ba:	4b80      	ldr	r3, [pc, #512]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80e1 	beq.w	80022a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	f000 8083 	beq.w	80021ec <HAL_RCC_GetSysClockFreq+0x204>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f200 80a1 	bhi.w	8002230 <HAL_RCC_GetSysClockFreq+0x248>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x114>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d056      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020fa:	e099      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020fc:	4b6f      	ldr	r3, [pc, #444]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02d      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002108:	4b6c      	ldr	r3, [pc, #432]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	4a6b      	ldr	r2, [pc, #428]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002132:	4b62      	ldr	r3, [pc, #392]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002142:	ed97 6a02 	vldr	s12, [r7, #8]
 8002146:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80022cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800214a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800214e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002162:	e087      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80022d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002176:	4b51      	ldr	r3, [pc, #324]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002186:	ed97 6a02 	vldr	s12, [r7, #8]
 800218a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80022cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800218e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800219a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800219e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021a6:	e065      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80022d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ba:	4b40      	ldr	r3, [pc, #256]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80022cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80021d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ea:	e043      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80022d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021fe:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002212:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80022cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800221a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800221e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800222e:	e021      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80022d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800223e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002252:	ed97 6a02 	vldr	s12, [r7, #8]
 8002256:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80022cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800225a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002272:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	0a5b      	lsrs	r3, r3, #9
 800227a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800227e:	3301      	adds	r3, #1
 8002280:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800228c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002298:	ee17 3a90 	vmov	r3, s15
 800229c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800229e:	e005      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
      break;
 80022a4:	e002      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022a8:	61bb      	str	r3, [r7, #24]
      break;
 80022aa:	bf00      	nop
  }

  return sysclockfreq;
 80022ac:	69bb      	ldr	r3, [r7, #24]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	58024400 	.word	0x58024400
 80022c0:	03d09000 	.word	0x03d09000
 80022c4:	003d0900 	.word	0x003d0900
 80022c8:	017d7840 	.word	0x017d7840
 80022cc:	46000000 	.word	0x46000000
 80022d0:	4c742400 	.word	0x4c742400
 80022d4:	4a742400 	.word	0x4a742400
 80022d8:	4bbebc20 	.word	0x4bbebc20

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80022e2:	f7ff fe81 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_RCC_GetHCLKFreq+0x50>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	490f      	ldr	r1, [pc, #60]	@ (8002330 <HAL_RCC_GetHCLKFreq+0x54>)
 80022f4:	5ccb      	ldrb	r3, [r1, r3]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002300:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_RCC_GetHCLKFreq+0x50>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_GetHCLKFreq+0x54>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a07      	ldr	r2, [pc, #28]	@ (8002334 <HAL_RCC_GetHCLKFreq+0x58>)
 8002318:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800231a:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <HAL_RCC_GetHCLKFreq+0x5c>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <HAL_RCC_GetHCLKFreq+0x58>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58024400 	.word	0x58024400
 8002330:	08008730 	.word	0x08008730
 8002334:	24000004 	.word	0x24000004
 8002338:	24000000 	.word	0x24000000

0800233c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002340:	f7ff ffcc 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4904      	ldr	r1, [pc, #16]	@ (8002364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	58024400 	.word	0x58024400
 8002364:	08008730 	.word	0x08008730

08002368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800236c:	f7ff ffb6 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4904      	ldr	r1, [pc, #16]	@ (8002390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	58024400 	.word	0x58024400
 8002390:	08008730 	.word	0x08008730

08002394 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	223f      	movs	r2, #63	@ 0x3f
 80023a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 0207 	and.w	r2, r3, #7
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80023b0:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80023bc:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 020f 	and.w	r2, r3, #15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <HAL_RCC_GetClockConfig+0x7c>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_RCC_GetClockConfig+0x80>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	58024400 	.word	0x58024400
 8002414:	52002000 	.word	0x52002000

08002418 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b0c6      	sub	sp, #280	@ 0x118
 800241e:	af00      	add	r7, sp, #0
 8002420:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800243c:	2500      	movs	r5, #0
 800243e:	ea54 0305 	orrs.w	r3, r4, r5
 8002442:	d049      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800244a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800244e:	d02f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002450:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002454:	d828      	bhi.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800245a:	d01a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800245c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002460:	d822      	bhi.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800246a:	d007      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800246c:	e01c      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246e:	4bab      	ldr	r3, [pc, #684]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	4aaa      	ldr	r2, [pc, #680]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800247a:	e01a      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800247c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002480:	3308      	adds	r3, #8
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f001 fc25 	bl	8003cd4 <RCCEx_PLL2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002490:	e00f      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002496:	3328      	adds	r3, #40	@ 0x28
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fccc 	bl	8003e38 <RCCEx_PLL3_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024a6:	e004      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80024ae:	e000      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024ba:	4b98      	ldr	r3, [pc, #608]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80024c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024c8:	4a94      	ldr	r2, [pc, #592]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024ca:	430b      	orrs	r3, r1
 80024cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80024ce:	e003      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80024e4:	f04f 0900 	mov.w	r9, #0
 80024e8:	ea58 0309 	orrs.w	r3, r8, r9
 80024ec:	d047      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d82a      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002500 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002515 	.word	0x08002515
 8002504:	08002523 	.word	0x08002523
 8002508:	08002539 	.word	0x08002539
 800250c:	08002557 	.word	0x08002557
 8002510:	08002557 	.word	0x08002557
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002514:	4b81      	ldr	r3, [pc, #516]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	4a80      	ldr	r2, [pc, #512]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800251e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002520:	e01a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002526:	3308      	adds	r3, #8
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f001 fbd2 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002536:	e00f      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800253c:	3328      	adds	r3, #40	@ 0x28
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fc79 	bl	8003e38 <RCCEx_PLL3_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800254c:	e004      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002554:	e000      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002560:	4b6e      	ldr	r3, [pc, #440]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002564:	f023 0107 	bic.w	r1, r3, #7
 8002568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	4a6b      	ldr	r2, [pc, #428]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002570:	430b      	orrs	r3, r1
 8002572:	6513      	str	r3, [r2, #80]	@ 0x50
 8002574:	e003      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800257a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800257e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800258a:	f04f 0b00 	mov.w	fp, #0
 800258e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002592:	d05b      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800259c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80025a0:	d03b      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80025a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80025a6:	d834      	bhi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ac:	d037      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80025ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025b2:	d82e      	bhi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80025b8:	d033      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80025be:	d828      	bhi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c4:	d01a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ca:	d822      	bhi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80025d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025d4:	d007      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80025d6:	e01c      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	4a4f      	ldr	r2, [pc, #316]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025e4:	e01e      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025ea:	3308      	adds	r3, #8
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fb70 	bl	8003cd4 <RCCEx_PLL2_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025fa:	e013      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002600:	3328      	adds	r3, #40	@ 0x28
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fc17 	bl	8003e38 <RCCEx_PLL3_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002610:	e008      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002618:	e004      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800261a:	bf00      	nop
 800261c:	e002      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800262c:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002638:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800263c:	4a37      	ldr	r2, [pc, #220]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800263e:	430b      	orrs	r3, r1
 8002640:	6593      	str	r3, [r2, #88]	@ 0x58
 8002642:	e003      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002648:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800264c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002662:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002666:	460b      	mov	r3, r1
 8002668:	4313      	orrs	r3, r2
 800266a:	d05d      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800266c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002670:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002674:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002678:	d03b      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800267a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800267e:	d834      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002680:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002684:	d037      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800268a:	d82e      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800268c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002690:	d033      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002692:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002696:	d828      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800269c:	d01a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800269e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026a2:	d822      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ac:	d007      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80026ae:	e01c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	4a19      	ldr	r2, [pc, #100]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026bc:	e01e      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026c2:	3308      	adds	r3, #8
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fb04 	bl	8003cd4 <RCCEx_PLL2_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026d2:	e013      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026d8:	3328      	adds	r3, #40	@ 0x28
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 fbab 	bl	8003e38 <RCCEx_PLL3_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e8:	e008      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80026f0:	e004      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80026f2:	bf00      	nop
 80026f4:	e002      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80026fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800270c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002710:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002714:	4a01      	ldr	r2, [pc, #4]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002716:	430b      	orrs	r3, r1
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
 800271a:	e005      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800271c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002734:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800273e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002742:	460b      	mov	r3, r1
 8002744:	4313      	orrs	r3, r2
 8002746:	d03a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	2b30      	cmp	r3, #48	@ 0x30
 8002750:	d01f      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002752:	2b30      	cmp	r3, #48	@ 0x30
 8002754:	d819      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002756:	2b20      	cmp	r3, #32
 8002758:	d00c      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800275a:	2b20      	cmp	r3, #32
 800275c:	d815      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800275e:	2b00      	cmp	r3, #0
 8002760:	d019      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002762:	2b10      	cmp	r3, #16
 8002764:	d111      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002766:	4baa      	ldr	r3, [pc, #680]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	4aa9      	ldr	r2, [pc, #676]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002772:	e011      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002778:	3308      	adds	r3, #8
 800277a:	2102      	movs	r1, #2
 800277c:	4618      	mov	r0, r3
 800277e:	f001 faa9 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002788:	e006      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002790:	e002      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80027a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	4a98      	ldr	r2, [pc, #608]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027b0:	430b      	orrs	r3, r1
 80027b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b4:	e003      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80027ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80027d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80027d8:	460b      	mov	r3, r1
 80027da:	4313      	orrs	r3, r2
 80027dc:	d051      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80027de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027e8:	d035      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80027ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027ee:	d82e      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80027f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027f4:	d031      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80027f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027fa:	d828      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002800:	d01a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002806:	d822      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002810:	d007      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002812:	e01c      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002814:	4b7e      	ldr	r3, [pc, #504]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	4a7d      	ldr	r2, [pc, #500]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800281a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002820:	e01c      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002826:	3308      	adds	r3, #8
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fa52 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002836:	e011      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800283c:	3328      	adds	r3, #40	@ 0x28
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f001 faf9 	bl	8003e38 <RCCEx_PLL3_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800284c:	e006      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002854:	e002      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800285a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800285c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002864:	4b6a      	ldr	r3, [pc, #424]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002868:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800286c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	4a67      	ldr	r2, [pc, #412]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002874:	430b      	orrs	r3, r1
 8002876:	6513      	str	r3, [r2, #80]	@ 0x50
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800287e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800288e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002898:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800289c:	460b      	mov	r3, r1
 800289e:	4313      	orrs	r3, r2
 80028a0:	d053      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ac:	d033      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80028ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b2:	d82c      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028b8:	d02f      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80028ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028be:	d826      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028c4:	d02b      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80028c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028ca:	d820      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028d0:	d012      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80028d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028d6:	d81a      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d022      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d115      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028e6:	3308      	adds	r3, #8
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f9f2 	bl	8003cd4 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028f6:	e015      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028fc:	3328      	adds	r3, #40	@ 0x28
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fa99 	bl	8003e38 <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800290c:	e00a      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002916:	bf00      	nop
 8002918:	e004      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800291a:	bf00      	nop
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800292c:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800292e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002930:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	4a35      	ldr	r2, [pc, #212]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800293c:	430b      	orrs	r3, r1
 800293e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002940:	e003      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800294a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002960:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002964:	460b      	mov	r3, r1
 8002966:	4313      	orrs	r3, r2
 8002968:	d058      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800296a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800296e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002976:	d033      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800297c:	d82c      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002982:	d02f      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002988:	d826      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800298a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800298e:	d02b      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002994:	d820      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800299a:	d012      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800299c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a0:	d81a      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d022      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029aa:	d115      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029b0:	3308      	adds	r3, #8
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f98d 	bl	8003cd4 <RCCEx_PLL2_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029c0:	e015      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029c6:	3328      	adds	r3, #40	@ 0x28
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fa34 	bl	8003e38 <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029d6:	e00a      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80029de:	e006      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029e0:	bf00      	nop
 80029e2:	e004      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029e4:	bf00      	nop
 80029e6:	e002      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80029ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10e      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80029fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a06:	4a02      	ldr	r2, [pc, #8]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a0e:	bf00      	nop
 8002a10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002a32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	d037      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a46:	d00e      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a4c:	d816      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d018      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a56:	d111      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a58:	4bc4      	ldr	r3, [pc, #784]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	4ac3      	ldr	r2, [pc, #780]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a64:	e00f      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f930 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a7a:	e004      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a8e:	4bb7      	ldr	r3, [pc, #732]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9c:	4ab3      	ldr	r2, [pc, #716]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aa2:	e003      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002aa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ac2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	d039      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d81c      	bhi.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002b19 	.word	0x08002b19
 8002ae0:	08002aed 	.word	0x08002aed
 8002ae4:	08002afb 	.word	0x08002afb
 8002ae8:	08002b19 	.word	0x08002b19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aec:	4b9f      	ldr	r3, [pc, #636]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	4a9e      	ldr	r2, [pc, #632]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002af8:	e00f      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002afe:	3308      	adds	r3, #8
 8002b00:	2102      	movs	r1, #2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f8e6 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b0e:	e004      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b16:	e000      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b22:	4b92      	ldr	r3, [pc, #584]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f023 0103 	bic.w	r1, r3, #3
 8002b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b30:	4a8e      	ldr	r2, [pc, #568]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b32:	430b      	orrs	r3, r1
 8002b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b36:	e003      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f000 8099 	beq.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b62:	4b83      	ldr	r3, [pc, #524]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a82      	ldr	r2, [pc, #520]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6e:	f7fe f98b 	bl	8000e88 <HAL_GetTick>
 8002b72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b76:	e00b      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fe f986 	bl	8000e88 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	@ 0x64
 8002b86:	d903      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b90:	4b77      	ldr	r3, [pc, #476]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ed      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d173      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ba4:	4b71      	ldr	r3, [pc, #452]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bb0:	4053      	eors	r3, r2
 8002bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d015      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bba:	4b6c      	ldr	r3, [pc, #432]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b69      	ldr	r3, [pc, #420]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	4a68      	ldr	r2, [pc, #416]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b66      	ldr	r3, [pc, #408]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a65      	ldr	r2, [pc, #404]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bde:	4a63      	ldr	r2, [pc, #396]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002be4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf2:	d118      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f948 	bl	8000e88 <HAL_GetTick>
 8002bf8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bfc:	e00d      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe f943 	bl	8000e88 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d903      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002c18:	e005      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1a:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0eb      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d129      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c3e:	d10e      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002c40:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c50:	091a      	lsrs	r2, r3, #4
 8002c52:	4b48      	ldr	r3, [pc, #288]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	4a45      	ldr	r2, [pc, #276]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6113      	str	r3, [r2, #16]
 8002c5c:	e005      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002c5e:	4b43      	ldr	r3, [pc, #268]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	4a42      	ldr	r2, [pc, #264]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c68:	6113      	str	r3, [r2, #16]
 8002c6a:	4b40      	ldr	r3, [pc, #256]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002c8a:	e003      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f002 0301 	and.w	r3, r2, #1
 8002ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002caa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f000 808f 	beq.w	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cbc:	2b28      	cmp	r3, #40	@ 0x28
 8002cbe:	d871      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002dad 	.word	0x08002dad
 8002ccc:	08002da5 	.word	0x08002da5
 8002cd0:	08002da5 	.word	0x08002da5
 8002cd4:	08002da5 	.word	0x08002da5
 8002cd8:	08002da5 	.word	0x08002da5
 8002cdc:	08002da5 	.word	0x08002da5
 8002ce0:	08002da5 	.word	0x08002da5
 8002ce4:	08002da5 	.word	0x08002da5
 8002ce8:	08002d79 	.word	0x08002d79
 8002cec:	08002da5 	.word	0x08002da5
 8002cf0:	08002da5 	.word	0x08002da5
 8002cf4:	08002da5 	.word	0x08002da5
 8002cf8:	08002da5 	.word	0x08002da5
 8002cfc:	08002da5 	.word	0x08002da5
 8002d00:	08002da5 	.word	0x08002da5
 8002d04:	08002da5 	.word	0x08002da5
 8002d08:	08002d8f 	.word	0x08002d8f
 8002d0c:	08002da5 	.word	0x08002da5
 8002d10:	08002da5 	.word	0x08002da5
 8002d14:	08002da5 	.word	0x08002da5
 8002d18:	08002da5 	.word	0x08002da5
 8002d1c:	08002da5 	.word	0x08002da5
 8002d20:	08002da5 	.word	0x08002da5
 8002d24:	08002da5 	.word	0x08002da5
 8002d28:	08002dad 	.word	0x08002dad
 8002d2c:	08002da5 	.word	0x08002da5
 8002d30:	08002da5 	.word	0x08002da5
 8002d34:	08002da5 	.word	0x08002da5
 8002d38:	08002da5 	.word	0x08002da5
 8002d3c:	08002da5 	.word	0x08002da5
 8002d40:	08002da5 	.word	0x08002da5
 8002d44:	08002da5 	.word	0x08002da5
 8002d48:	08002dad 	.word	0x08002dad
 8002d4c:	08002da5 	.word	0x08002da5
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002da5 	.word	0x08002da5
 8002d58:	08002da5 	.word	0x08002da5
 8002d5c:	08002da5 	.word	0x08002da5
 8002d60:	08002da5 	.word	0x08002da5
 8002d64:	08002da5 	.word	0x08002da5
 8002d68:	08002dad 	.word	0x08002dad
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58024800 	.word	0x58024800
 8002d74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 ffa7 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d8c:	e00f      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d92:	3328      	adds	r3, #40	@ 0x28
 8002d94:	2101      	movs	r1, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f84e 	bl	8003e38 <RCCEx_PLL3_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002da2:	e004      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002daa:	e000      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002db6:	4bbf      	ldr	r3, [pc, #764]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc4:	4abb      	ldr	r2, [pc, #748]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8002dca:	e003      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f002 0302 	and.w	r3, r2, #2
 8002de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4313      	orrs	r3, r2
 8002df2:	d041      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d824      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e51 	.word	0x08002e51
 8002e08:	08002e1d 	.word	0x08002e1d
 8002e0c:	08002e33 	.word	0x08002e33
 8002e10:	08002e51 	.word	0x08002e51
 8002e14:	08002e51 	.word	0x08002e51
 8002e18:	08002e51 	.word	0x08002e51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e20:	3308      	adds	r3, #8
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ff55 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e30:	e00f      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e36:	3328      	adds	r3, #40	@ 0x28
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fffc 	bl	8003e38 <RCCEx_PLL3_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e46:	e004      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e4e:	e000      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8002e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e5a:	4b96      	ldr	r3, [pc, #600]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f023 0107 	bic.w	r1, r3, #7
 8002e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e68:	4a92      	ldr	r2, [pc, #584]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0304 	and.w	r3, r2, #4
 8002e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d044      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d825      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ef9 	.word	0x08002ef9
 8002eb0:	08002ec5 	.word	0x08002ec5
 8002eb4:	08002edb 	.word	0x08002edb
 8002eb8:	08002ef9 	.word	0x08002ef9
 8002ebc:	08002ef9 	.word	0x08002ef9
 8002ec0:	08002ef9 	.word	0x08002ef9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ec8:	3308      	adds	r3, #8
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 ff01 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e00f      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ede:	3328      	adds	r3, #40	@ 0x28
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ffa8 	bl	8003e38 <RCCEx_PLL3_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002eee:	e004      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8002ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f02:	4b6c      	ldr	r3, [pc, #432]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	f023 0107 	bic.w	r1, r3, #7
 8002f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f12:	4a68      	ldr	r2, [pc, #416]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f002 0320 	and.w	r3, r2, #32
 8002f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002f38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d055      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4e:	d033      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f54:	d82c      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5a:	d02f      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f60:	d826      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f66:	d02b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f6c:	d820      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f72:	d012      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f78:	d81a      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d022      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f88:	3308      	adds	r3, #8
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fea1 	bl	8003cd4 <RCCEx_PLL2_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f98:	e015      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f9e:	3328      	adds	r3, #40	@ 0x28
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 ff48 	bl	8003e38 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002fb6:	e006      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fb8:	bf00      	nop
 8002fba:	e004      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fce:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fde:	4a35      	ldr	r2, [pc, #212]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fe4:	e003      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ffa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003004:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003008:	460b      	mov	r3, r1
 800300a:	4313      	orrs	r3, r2
 800300c:	d058      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800300e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003012:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003016:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800301a:	d033      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800301c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003020:	d82c      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003026:	d02f      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302c:	d826      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800302e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003032:	d02b      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003038:	d820      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800303a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800303e:	d012      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003044:	d81a      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d022      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304e:	d115      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003054:	3308      	adds	r3, #8
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fe3b 	bl	8003cd4 <RCCEx_PLL2_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003064:	e015      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306a:	3328      	adds	r3, #40	@ 0x28
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fee2 	bl	8003e38 <RCCEx_PLL3_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800307a:	e00a      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003082:	e006      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003084:	bf00      	nop
 8003086:	e004      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003088:	bf00      	nop
 800308a:	e002      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800308c:	bf00      	nop
 800308e:	e000      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80030a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030aa:	4a02      	ldr	r2, [pc, #8]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b0:	e006      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80030b2:	bf00      	nop
 80030b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80030cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80030da:	460b      	mov	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	d055      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80030e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80030ec:	d033      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80030ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80030f2:	d82c      	bhi.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f8:	d02f      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80030fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fe:	d826      	bhi.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003100:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003104:	d02b      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003106:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800310a:	d820      	bhi.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800310c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003110:	d012      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003116:	d81a      	bhi.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d022      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003120:	d115      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003126:	3308      	adds	r3, #8
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fdd2 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003136:	e015      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800313c:	3328      	adds	r3, #40	@ 0x28
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fe79 	bl	8003e38 <RCCEx_PLL3_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800314c:	e00a      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003154:	e006      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003156:	bf00      	nop
 8003158:	e004      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800315a:	bf00      	nop
 800315c:	e002      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800316c:	4ba0      	ldr	r3, [pc, #640]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003178:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800317c:	4a9c      	ldr	r2, [pc, #624]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800317e:	430b      	orrs	r3, r1
 8003180:	6593      	str	r3, [r2, #88]	@ 0x58
 8003182:	e003      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800318c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f002 0308 	and.w	r3, r2, #8
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80031a6:	460b      	mov	r3, r1
 80031a8:	4313      	orrs	r3, r2
 80031aa:	d01e      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80031ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031be:	3328      	adds	r3, #40	@ 0x28
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fe38 	bl	8003e38 <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80031d4:	4b86      	ldr	r3, [pc, #536]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e4:	4a82      	ldr	r2, [pc, #520]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80031e6:	430b      	orrs	r3, r1
 80031e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f002 0310 	and.w	r3, r2, #16
 80031f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003200:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003204:	460b      	mov	r3, r1
 8003206:	4313      	orrs	r3, r2
 8003208:	d01e      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800320a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003216:	d10c      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	3328      	adds	r3, #40	@ 0x28
 800321e:	2102      	movs	r1, #2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fe09 	bl	8003e38 <RCCEx_PLL3_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003232:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800323a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	4a6b      	ldr	r2, [pc, #428]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003254:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003256:	2300      	movs	r3, #0
 8003258:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800325a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800325e:	460b      	mov	r3, r1
 8003260:	4313      	orrs	r3, r2
 8003262:	d03e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800326c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003270:	d022      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003276:	d81b      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003280:	d00b      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003282:	e015      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003288:	3308      	adds	r3, #8
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd21 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003298:	e00f      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800329a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329e:	3328      	adds	r3, #40	@ 0x28
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fdc8 	bl	8003e38 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c2:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80032ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032d2:	4a47      	ldr	r2, [pc, #284]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80032ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80032f0:	2300      	movs	r3, #0
 80032f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80032f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80032f8:	460b      	mov	r3, r1
 80032fa:	4313      	orrs	r3, r2
 80032fc:	d03b      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80032fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800330a:	d01f      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800330c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003310:	d818      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003316:	d003      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800331c:	d007      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800332c:	e00f      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800332e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003332:	3328      	adds	r3, #40	@ 0x28
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fd7e 	bl	8003e38 <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003342:	e004      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800334c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003356:	4b26      	ldr	r3, [pc, #152]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800335e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003366:	4a22      	ldr	r2, [pc, #136]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003368:	430b      	orrs	r3, r1
 800336a:	6553      	str	r3, [r2, #84]	@ 0x54
 800336c:	e003      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003372:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003382:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003384:	2300      	movs	r3, #0
 8003386:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003388:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800338c:	460b      	mov	r3, r1
 800338e:	4313      	orrs	r3, r2
 8003390:	d034      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a0:	d007      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80033a2:	e011      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	4a11      	ldr	r2, [pc, #68]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033b0:	e00e      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b6:	3308      	adds	r3, #8
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fc8a 	bl	8003cd4 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033c6:	e003      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e6:	4a02      	ldr	r2, [pc, #8]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033e8:	430b      	orrs	r3, r1
 80033ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80033ee:	bf00      	nop
 80033f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003408:	663b      	str	r3, [r7, #96]	@ 0x60
 800340a:	2300      	movs	r3, #0
 800340c:	667b      	str	r3, [r7, #100]	@ 0x64
 800340e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d00c      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341c:	3328      	adds	r3, #40	@ 0x28
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd09 	bl	8003e38 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800343e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003440:	2300      	movs	r3, #0
 8003442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003444:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d036      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800344e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003458:	d018      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800345a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800345e:	d811      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003464:	d014      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800346a:	d80b      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d011      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003476:	4bb7      	ldr	r3, [pc, #732]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	4ab6      	ldr	r2, [pc, #728]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800349e:	4bad      	ldr	r3, [pc, #692]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ac:	4aa9      	ldr	r2, [pc, #676]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80034c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80034ca:	2300      	movs	r3, #0
 80034cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80034d2:	460b      	mov	r3, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034d8:	4b9e      	ldr	r3, [pc, #632]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	4a9b      	ldr	r2, [pc, #620]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80034f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fa:	2300      	movs	r3, #0
 80034fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003502:	460b      	mov	r3, r1
 8003504:	4313      	orrs	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003508:	4b92      	ldr	r3, [pc, #584]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800350a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003516:	4a8f      	ldr	r2, [pc, #572]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003518:	430b      	orrs	r3, r1
 800351a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003528:	643b      	str	r3, [r7, #64]	@ 0x40
 800352a:	2300      	movs	r3, #0
 800352c:	647b      	str	r3, [r7, #68]	@ 0x44
 800352e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003532:	460b      	mov	r3, r1
 8003534:	4313      	orrs	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003538:	4b86      	ldr	r3, [pc, #536]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	4a85      	ldr	r2, [pc, #532]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800353e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003542:	6113      	str	r3, [r2, #16]
 8003544:	4b83      	ldr	r3, [pc, #524]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003546:	6919      	ldr	r1, [r3, #16]
 8003548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003550:	4a80      	ldr	r2, [pc, #512]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003552:	430b      	orrs	r3, r1
 8003554:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003568:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800356c:	460b      	mov	r3, r1
 800356e:	4313      	orrs	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003572:	4b78      	ldr	r3, [pc, #480]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800357a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003580:	4a74      	ldr	r2, [pc, #464]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003582:	430b      	orrs	r3, r1
 8003584:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
 8003598:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800359c:	460b      	mov	r3, r1
 800359e:	4313      	orrs	r3, r2
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80035aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	4a68      	ldr	r2, [pc, #416]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	2100      	movs	r1, #0
 80035c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d011      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d8:	3308      	adds	r3, #8
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fb79 	bl	8003cd4 <RCCEx_PLL2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80035e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	2100      	movs	r1, #0
 8003602:	6239      	str	r1, [r7, #32]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
 800360a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d011      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003618:	3308      	adds	r3, #8
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fb59 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	2100      	movs	r1, #0
 8003642:	61b9      	str	r1, [r7, #24]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800364e:	460b      	mov	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	d011      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003658:	3308      	adds	r3, #8
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fb39 	bl	8003cd4 <RCCEx_PLL2_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003674:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	2100      	movs	r1, #0
 8003682:	6139      	str	r1, [r7, #16]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d011      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003698:	3328      	adds	r3, #40	@ 0x28
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fbcb 	bl	8003e38 <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80036a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	2100      	movs	r1, #0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036ce:	460b      	mov	r3, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d011      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d8:	3328      	adds	r3, #40	@ 0x28
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fbab 	bl	8003e38 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80036e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	2100      	movs	r1, #0
 8003702:	6039      	str	r1, [r7, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d011      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003718:	3328      	adds	r3, #40	@ 0x28
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fb8b 	bl	8003e38 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003738:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
}
 8003746:	4618      	mov	r0, r3
 8003748:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	58024400 	.word	0x58024400

08003758 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800375c:	f7fe fdbe 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4904      	ldr	r1, [pc, #16]	@ (8003780 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	58024400 	.word	0x58024400
 8003780:	08008730 	.word	0x08008730

08003784 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800378c:	4ba1      	ldr	r3, [pc, #644]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003796:	4b9f      	ldr	r3, [pc, #636]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	0b1b      	lsrs	r3, r3, #12
 800379c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037a2:	4b9c      	ldr	r3, [pc, #624]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80037ae:	4b99      	ldr	r3, [pc, #612]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	08db      	lsrs	r3, r3, #3
 80037b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8111 	beq.w	80039f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	f000 8083 	beq.w	80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	f200 80a1 	bhi.w	8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d056      	beq.n	800389c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037ee:	e099      	b.n	8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f0:	4b88      	ldr	r3, [pc, #544]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02d      	beq.n	8003858 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037fc:	4b85      	ldr	r3, [pc, #532]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	08db      	lsrs	r3, r3, #3
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	4a84      	ldr	r2, [pc, #528]	@ (8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003826:	4b7b      	ldr	r3, [pc, #492]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003836:	ed97 6a03 	vldr	s12, [r7, #12]
 800383a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800383e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800384a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003856:	e087      	b.n	8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003862:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800386c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387a:	ed97 6a03 	vldr	s12, [r7, #12]
 800387e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800388e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389a:	e065      	b.n	8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ae:	4b59      	ldr	r3, [pc, #356]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038be:	ed97 6a03 	vldr	s12, [r7, #12]
 80038c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038de:	e043      	b.n	8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f2:	4b48      	ldr	r3, [pc, #288]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003902:	ed97 6a03 	vldr	s12, [r7, #12]
 8003906:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800390a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003922:	e021      	b.n	8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003936:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003946:	ed97 6a03 	vldr	s12, [r7, #12]
 800394a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800394e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800395a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003966:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003968:	4b2a      	ldr	r3, [pc, #168]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	0a5b      	lsrs	r3, r3, #9
 800396e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800397e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003982:	edd7 6a07 	vldr	s13, [r7, #28]
 8003986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800398e:	ee17 2a90 	vmov	r2, s15
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003996:	4b1f      	ldr	r3, [pc, #124]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039bc:	ee17 2a90 	vmov	r2, s15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039c4:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	0e1b      	lsrs	r3, r3, #24
 80039ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039de:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ea:	ee17 2a90 	vmov	r2, s15
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
}
 8003a06:	bf00      	nop
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
 8003a18:	03d09000 	.word	0x03d09000
 8003a1c:	46000000 	.word	0x46000000
 8003a20:	4c742400 	.word	0x4c742400
 8003a24:	4a742400 	.word	0x4a742400
 8003a28:	4bbebc20 	.word	0x4bbebc20

08003a2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a34:	4ba1      	ldr	r3, [pc, #644]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a3e:	4b9f      	ldr	r3, [pc, #636]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	0d1b      	lsrs	r3, r3, #20
 8003a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a56:	4b99      	ldr	r3, [pc, #612]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8111 	beq.w	8003c9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	f000 8083 	beq.w	8003b88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	f200 80a1 	bhi.w	8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d056      	beq.n	8003b44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a96:	e099      	b.n	8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a98:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02d      	beq.n	8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003aa4:	4b85      	ldr	r3, [pc, #532]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	4a84      	ldr	r2, [pc, #528]	@ (8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b7b      	ldr	r3, [pc, #492]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003afe:	e087      	b.n	8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b6a      	ldr	r3, [pc, #424]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b42:	e065      	b.n	8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b59      	ldr	r3, [pc, #356]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b86:	e043      	b.n	8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b48      	ldr	r3, [pc, #288]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bca:	e021      	b.n	8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bde:	4b37      	ldr	r3, [pc, #220]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c10:	4b2a      	ldr	r3, [pc, #168]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	0a5b      	lsrs	r3, r3, #9
 8003c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c64:	ee17 2a90 	vmov	r2, s15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c6c:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c92:	ee17 2a90 	vmov	r2, s15
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c9a:	e008      	b.n	8003cae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	3724      	adds	r7, #36	@ 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	03d09000 	.word	0x03d09000
 8003cc4:	46000000 	.word	0x46000000
 8003cc8:	4c742400 	.word	0x4c742400
 8003ccc:	4a742400 	.word	0x4a742400
 8003cd0:	4bbebc20 	.word	0x4bbebc20

08003cd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce2:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d101      	bne.n	8003cf2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e099      	b.n	8003e26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfe:	f7fd f8c3 	bl	8000e88 <HAL_GetTick>
 8003d02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d06:	f7fd f8bf 	bl	8000e88 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e086      	b.n	8003e26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d18:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d24:	4b42      	ldr	r3, [pc, #264]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	493f      	ldr	r1, [pc, #252]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d68:	4931      	ldr	r1, [pc, #196]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d6e:	4b30      	ldr	r3, [pc, #192]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	492d      	ldr	r1, [pc, #180]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d80:	4b2b      	ldr	r3, [pc, #172]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	f023 0220 	bic.w	r2, r3, #32
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4928      	ldr	r1, [pc, #160]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d92:	4b27      	ldr	r3, [pc, #156]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	4a26      	ldr	r2, [pc, #152]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d9e:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003da2:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <RCCEx_PLL2_Config+0x160>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	69d2      	ldr	r2, [r2, #28]
 8003daa:	00d2      	lsls	r2, r2, #3
 8003dac:	4920      	ldr	r1, [pc, #128]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f043 0310 	orr.w	r3, r3, #16
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003dd0:	e00f      	b.n	8003df2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dd8:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	4a14      	ldr	r2, [pc, #80]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003de4:	e005      	b.n	8003df2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003de6:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	4a11      	ldr	r2, [pc, #68]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003dec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003df2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfe:	f7fd f843 	bl	8000e88 <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e06:	f7fd f83f 	bl	8000e88 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e006      	b.n	8003e26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <RCCEx_PLL2_Config+0x15c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	ffff0007 	.word	0xffff0007

08003e38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e46:	4b53      	ldr	r3, [pc, #332]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d101      	bne.n	8003e56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e099      	b.n	8003f8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e56:	4b4f      	ldr	r3, [pc, #316]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fd f811 	bl	8000e88 <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e6a:	f7fd f80d 	bl	8000e88 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e086      	b.n	8003f8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e7c:	4b45      	ldr	r3, [pc, #276]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e88:	4b42      	ldr	r3, [pc, #264]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	051b      	lsls	r3, r3, #20
 8003e96:	493f      	ldr	r1, [pc, #252]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ecc:	4931      	ldr	r1, [pc, #196]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ed2:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	492d      	ldr	r1, [pc, #180]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	4928      	ldr	r1, [pc, #160]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ef6:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	4a26      	ldr	r2, [pc, #152]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f06:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <RCCEx_PLL3_Config+0x160>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	69d2      	ldr	r2, [r2, #28]
 8003f0e:	00d2      	lsls	r2, r2, #3
 8003f10:	4920      	ldr	r1, [pc, #128]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f16:	4b1f      	ldr	r3, [pc, #124]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f28:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f34:	e00f      	b.n	8003f56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f3c:	4b15      	ldr	r3, [pc, #84]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f48:	e005      	b.n	8003f56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f4a:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	4a11      	ldr	r2, [pc, #68]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f56:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f62:	f7fc ff91 	bl	8000e88 <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f6a:	f7fc ff8d 	bl	8000e88 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e006      	b.n	8003f8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <RCCEx_PLL3_Config+0x15c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
 8003f98:	ffff0007 	.word	0xffff0007

08003f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e049      	b.n	8004042 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f841 	bl	800404a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f000 f9f6 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e05e      	b.n	8004136 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2b      	ldr	r2, [pc, #172]	@ (8004144 <HAL_TIM_Base_Start_IT+0xe4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d027      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <HAL_TIM_Base_Start_IT+0xe8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a26      	ldr	r2, [pc, #152]	@ (800414c <HAL_TIM_Base_Start_IT+0xec>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a24      	ldr	r2, [pc, #144]	@ (8004150 <HAL_TIM_Base_Start_IT+0xf0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a23      	ldr	r2, [pc, #140]	@ (8004154 <HAL_TIM_Base_Start_IT+0xf4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <HAL_TIM_Base_Start_IT+0xf8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a20      	ldr	r2, [pc, #128]	@ (800415c <HAL_TIM_Base_Start_IT+0xfc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004160 <HAL_TIM_Base_Start_IT+0x100>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x94>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <HAL_TIM_Base_Start_IT+0x104>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d115      	bne.n	8004120 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_TIM_Base_Start_IT+0x108>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d015      	beq.n	8004132 <HAL_TIM_Base_Start_IT+0xd2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410c:	d011      	beq.n	8004132 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	e008      	b.n	8004132 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e000      	b.n	8004134 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40010000 	.word	0x40010000
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800
 8004150:	40000c00 	.word	0x40000c00
 8004154:	40010400 	.word	0x40010400
 8004158:	40001800 	.word	0x40001800
 800415c:	40014000 	.word	0x40014000
 8004160:	4000e000 	.word	0x4000e000
 8004164:	4000e400 	.word	0x4000e400
 8004168:	00010007 	.word	0x00010007

0800416c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0202 	mvn.w	r2, #2
 80041a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8e9 	bl	800438e <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8db 	bl	800437a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8ec 	bl	80043a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0204 	mvn.w	r2, #4
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8c3 	bl	800438e <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8b5 	bl	800437a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8c6 	bl	80043a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d020      	beq.n	8004268 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0208 	mvn.w	r2, #8
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f89d 	bl	800438e <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f88f 	bl	800437a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8a0 	bl	80043a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d020      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2208      	movs	r2, #8
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f877 	bl	800438e <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f869 	bl	800437a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f87a 	bl	80043a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0201 	mvn.w	r2, #1
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc faae 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f919 	bl	8004538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f911 	bl	800454c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f834 	bl	80043b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f06f 0220 	mvn.w	r2, #32
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8d9 	bl	8004524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a47      	ldr	r2, [pc, #284]	@ (80044fc <TIM_Base_SetConfig+0x130>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ea:	d00f      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a44      	ldr	r2, [pc, #272]	@ (8004500 <TIM_Base_SetConfig+0x134>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00b      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a43      	ldr	r2, [pc, #268]	@ (8004504 <TIM_Base_SetConfig+0x138>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a42      	ldr	r2, [pc, #264]	@ (8004508 <TIM_Base_SetConfig+0x13c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a41      	ldr	r2, [pc, #260]	@ (800450c <TIM_Base_SetConfig+0x140>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d108      	bne.n	800441e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a36      	ldr	r2, [pc, #216]	@ (80044fc <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442c:	d023      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a33      	ldr	r2, [pc, #204]	@ (8004500 <TIM_Base_SetConfig+0x134>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a32      	ldr	r2, [pc, #200]	@ (8004504 <TIM_Base_SetConfig+0x138>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01b      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a31      	ldr	r2, [pc, #196]	@ (8004508 <TIM_Base_SetConfig+0x13c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d017      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a30      	ldr	r2, [pc, #192]	@ (800450c <TIM_Base_SetConfig+0x140>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2f      	ldr	r2, [pc, #188]	@ (8004510 <TIM_Base_SetConfig+0x144>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a2e      	ldr	r2, [pc, #184]	@ (8004514 <TIM_Base_SetConfig+0x148>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2d      	ldr	r2, [pc, #180]	@ (8004518 <TIM_Base_SetConfig+0x14c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2c      	ldr	r2, [pc, #176]	@ (800451c <TIM_Base_SetConfig+0x150>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0xaa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2b      	ldr	r2, [pc, #172]	@ (8004520 <TIM_Base_SetConfig+0x154>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a14      	ldr	r2, [pc, #80]	@ (80044fc <TIM_Base_SetConfig+0x130>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0x102>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a16      	ldr	r2, [pc, #88]	@ (800450c <TIM_Base_SetConfig+0x140>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x102>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a15      	ldr	r2, [pc, #84]	@ (8004510 <TIM_Base_SetConfig+0x144>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x102>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a14      	ldr	r2, [pc, #80]	@ (8004514 <TIM_Base_SetConfig+0x148>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x102>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a13      	ldr	r2, [pc, #76]	@ (8004518 <TIM_Base_SetConfig+0x14c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d103      	bne.n	80044d6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f043 0204 	orr.w	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40010400 	.word	0x40010400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800
 800451c:	4000e000 	.word	0x4000e000
 8004520:	4000e400 	.word	0x4000e400

08004524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e042      	b.n	80045f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc fb11 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2224      	movs	r2, #36	@ 0x24
 800458e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fe94 	bl	80052d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f825 	bl	8004600 <UART_SetConfig>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e01b      	b.n	80045f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 ff13 	bl	800541c <UART_CheckIdleState>
 80045f6:	4603      	mov	r3, r0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b092      	sub	sp, #72	@ 0x48
 8004606:	af00      	add	r7, sp, #0
 8004608:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	431a      	orrs	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	431a      	orrs	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4313      	orrs	r3, r2
 8004626:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4bbe      	ldr	r3, [pc, #760]	@ (8004928 <UART_SetConfig+0x328>)
 8004630:	4013      	ands	r3, r2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004638:	430b      	orrs	r3, r1
 800463a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4ab3      	ldr	r2, [pc, #716]	@ (800492c <UART_SetConfig+0x32c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004668:	4313      	orrs	r3, r2
 800466a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4baf      	ldr	r3, [pc, #700]	@ (8004930 <UART_SetConfig+0x330>)
 8004674:	4013      	ands	r3, r2
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800467c:	430b      	orrs	r3, r1
 800467e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	f023 010f 	bic.w	r1, r3, #15
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4aa6      	ldr	r2, [pc, #664]	@ (8004934 <UART_SetConfig+0x334>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d177      	bne.n	8004790 <UART_SetConfig+0x190>
 80046a0:	4ba5      	ldr	r3, [pc, #660]	@ (8004938 <UART_SetConfig+0x338>)
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a8:	2b28      	cmp	r3, #40	@ 0x28
 80046aa:	d86d      	bhi.n	8004788 <UART_SetConfig+0x188>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0xb4>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	08004759 	.word	0x08004759
 80046b8:	08004789 	.word	0x08004789
 80046bc:	08004789 	.word	0x08004789
 80046c0:	08004789 	.word	0x08004789
 80046c4:	08004789 	.word	0x08004789
 80046c8:	08004789 	.word	0x08004789
 80046cc:	08004789 	.word	0x08004789
 80046d0:	08004789 	.word	0x08004789
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004789 	.word	0x08004789
 80046dc:	08004789 	.word	0x08004789
 80046e0:	08004789 	.word	0x08004789
 80046e4:	08004789 	.word	0x08004789
 80046e8:	08004789 	.word	0x08004789
 80046ec:	08004789 	.word	0x08004789
 80046f0:	08004789 	.word	0x08004789
 80046f4:	08004769 	.word	0x08004769
 80046f8:	08004789 	.word	0x08004789
 80046fc:	08004789 	.word	0x08004789
 8004700:	08004789 	.word	0x08004789
 8004704:	08004789 	.word	0x08004789
 8004708:	08004789 	.word	0x08004789
 800470c:	08004789 	.word	0x08004789
 8004710:	08004789 	.word	0x08004789
 8004714:	08004771 	.word	0x08004771
 8004718:	08004789 	.word	0x08004789
 800471c:	08004789 	.word	0x08004789
 8004720:	08004789 	.word	0x08004789
 8004724:	08004789 	.word	0x08004789
 8004728:	08004789 	.word	0x08004789
 800472c:	08004789 	.word	0x08004789
 8004730:	08004789 	.word	0x08004789
 8004734:	08004779 	.word	0x08004779
 8004738:	08004789 	.word	0x08004789
 800473c:	08004789 	.word	0x08004789
 8004740:	08004789 	.word	0x08004789
 8004744:	08004789 	.word	0x08004789
 8004748:	08004789 	.word	0x08004789
 800474c:	08004789 	.word	0x08004789
 8004750:	08004789 	.word	0x08004789
 8004754:	08004781 	.word	0x08004781
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475e:	e326      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004766:	e322      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476e:	e31e      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004776:	e31a      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004778:	2320      	movs	r3, #32
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477e:	e316      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004780:	2340      	movs	r3, #64	@ 0x40
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004786:	e312      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004788:	2380      	movs	r3, #128	@ 0x80
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478e:	e30e      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a69      	ldr	r2, [pc, #420]	@ (800493c <UART_SetConfig+0x33c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d130      	bne.n	80047fc <UART_SetConfig+0x1fc>
 800479a:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <UART_SetConfig+0x338>)
 800479c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d826      	bhi.n	80047f4 <UART_SetConfig+0x1f4>
 80047a6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0x1ac>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047c5 	.word	0x080047c5
 80047b0:	080047cd 	.word	0x080047cd
 80047b4:	080047d5 	.word	0x080047d5
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ca:	e2f0      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047cc:	2304      	movs	r3, #4
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d2:	e2ec      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047d4:	2308      	movs	r3, #8
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047da:	e2e8      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047dc:	2310      	movs	r3, #16
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e2:	e2e4      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047e4:	2320      	movs	r3, #32
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ea:	e2e0      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047ec:	2340      	movs	r3, #64	@ 0x40
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f2:	e2dc      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047f4:	2380      	movs	r3, #128	@ 0x80
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fa:	e2d8      	b.n	8004dae <UART_SetConfig+0x7ae>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a4f      	ldr	r2, [pc, #316]	@ (8004940 <UART_SetConfig+0x340>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d130      	bne.n	8004868 <UART_SetConfig+0x268>
 8004806:	4b4c      	ldr	r3, [pc, #304]	@ (8004938 <UART_SetConfig+0x338>)
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b05      	cmp	r3, #5
 8004810:	d826      	bhi.n	8004860 <UART_SetConfig+0x260>
 8004812:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <UART_SetConfig+0x218>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004831 	.word	0x08004831
 800481c:	08004839 	.word	0x08004839
 8004820:	08004841 	.word	0x08004841
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e2ba      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483e:	e2b6      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004846:	e2b2      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484e:	e2ae      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004850:	2320      	movs	r3, #32
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e2aa      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004858:	2340      	movs	r3, #64	@ 0x40
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e2a6      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e2a2      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a35      	ldr	r2, [pc, #212]	@ (8004944 <UART_SetConfig+0x344>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d130      	bne.n	80048d4 <UART_SetConfig+0x2d4>
 8004872:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <UART_SetConfig+0x338>)
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b05      	cmp	r3, #5
 800487c:	d826      	bhi.n	80048cc <UART_SetConfig+0x2cc>
 800487e:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <UART_SetConfig+0x284>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	0800489d 	.word	0x0800489d
 8004888:	080048a5 	.word	0x080048a5
 800488c:	080048ad 	.word	0x080048ad
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a2:	e284      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048aa:	e280      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b2:	e27c      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ba:	e278      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048bc:	2320      	movs	r3, #32
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c2:	e274      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048c4:	2340      	movs	r3, #64	@ 0x40
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ca:	e270      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e26c      	b.n	8004dae <UART_SetConfig+0x7ae>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <UART_SetConfig+0x348>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d142      	bne.n	8004964 <UART_SetConfig+0x364>
 80048de:	4b16      	ldr	r3, [pc, #88]	@ (8004938 <UART_SetConfig+0x338>)
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d838      	bhi.n	800495c <UART_SetConfig+0x35c>
 80048ea:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <UART_SetConfig+0x2f0>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004909 	.word	0x08004909
 80048f4:	08004911 	.word	0x08004911
 80048f8:	08004919 	.word	0x08004919
 80048fc:	08004921 	.word	0x08004921
 8004900:	0800494d 	.word	0x0800494d
 8004904:	08004955 	.word	0x08004955
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490e:	e24e      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004916:	e24a      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491e:	e246      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004926:	e242      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004928:	cfff69f3 	.word	0xcfff69f3
 800492c:	58000c00 	.word	0x58000c00
 8004930:	11fff4ff 	.word	0x11fff4ff
 8004934:	40011000 	.word	0x40011000
 8004938:	58024400 	.word	0x58024400
 800493c:	40004400 	.word	0x40004400
 8004940:	40004800 	.word	0x40004800
 8004944:	40004c00 	.word	0x40004c00
 8004948:	40005000 	.word	0x40005000
 800494c:	2320      	movs	r3, #32
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004952:	e22c      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004954:	2340      	movs	r3, #64	@ 0x40
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495a:	e228      	b.n	8004dae <UART_SetConfig+0x7ae>
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004962:	e224      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4ab1      	ldr	r2, [pc, #708]	@ (8004c30 <UART_SetConfig+0x630>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d176      	bne.n	8004a5c <UART_SetConfig+0x45c>
 800496e:	4bb1      	ldr	r3, [pc, #708]	@ (8004c34 <UART_SetConfig+0x634>)
 8004970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004976:	2b28      	cmp	r3, #40	@ 0x28
 8004978:	d86c      	bhi.n	8004a54 <UART_SetConfig+0x454>
 800497a:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0x380>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004a25 	.word	0x08004a25
 8004984:	08004a55 	.word	0x08004a55
 8004988:	08004a55 	.word	0x08004a55
 800498c:	08004a55 	.word	0x08004a55
 8004990:	08004a55 	.word	0x08004a55
 8004994:	08004a55 	.word	0x08004a55
 8004998:	08004a55 	.word	0x08004a55
 800499c:	08004a55 	.word	0x08004a55
 80049a0:	08004a2d 	.word	0x08004a2d
 80049a4:	08004a55 	.word	0x08004a55
 80049a8:	08004a55 	.word	0x08004a55
 80049ac:	08004a55 	.word	0x08004a55
 80049b0:	08004a55 	.word	0x08004a55
 80049b4:	08004a55 	.word	0x08004a55
 80049b8:	08004a55 	.word	0x08004a55
 80049bc:	08004a55 	.word	0x08004a55
 80049c0:	08004a35 	.word	0x08004a35
 80049c4:	08004a55 	.word	0x08004a55
 80049c8:	08004a55 	.word	0x08004a55
 80049cc:	08004a55 	.word	0x08004a55
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004a55 	.word	0x08004a55
 80049d8:	08004a55 	.word	0x08004a55
 80049dc:	08004a55 	.word	0x08004a55
 80049e0:	08004a3d 	.word	0x08004a3d
 80049e4:	08004a55 	.word	0x08004a55
 80049e8:	08004a55 	.word	0x08004a55
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	08004a55 	.word	0x08004a55
 80049f4:	08004a55 	.word	0x08004a55
 80049f8:	08004a55 	.word	0x08004a55
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a45 	.word	0x08004a45
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004a55 	.word	0x08004a55
 8004a0c:	08004a55 	.word	0x08004a55
 8004a10:	08004a55 	.word	0x08004a55
 8004a14:	08004a55 	.word	0x08004a55
 8004a18:	08004a55 	.word	0x08004a55
 8004a1c:	08004a55 	.word	0x08004a55
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2a:	e1c0      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a32:	e1bc      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a34:	2308      	movs	r3, #8
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3a:	e1b8      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a42:	e1b4      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a44:	2320      	movs	r3, #32
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4a:	e1b0      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a4c:	2340      	movs	r3, #64	@ 0x40
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e1ac      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e1a8      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a75      	ldr	r2, [pc, #468]	@ (8004c38 <UART_SetConfig+0x638>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d130      	bne.n	8004ac8 <UART_SetConfig+0x4c8>
 8004a66:	4b73      	ldr	r3, [pc, #460]	@ (8004c34 <UART_SetConfig+0x634>)
 8004a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d826      	bhi.n	8004ac0 <UART_SetConfig+0x4c0>
 8004a72:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <UART_SetConfig+0x478>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a91 	.word	0x08004a91
 8004a7c:	08004a99 	.word	0x08004a99
 8004a80:	08004aa1 	.word	0x08004aa1
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004ab1 	.word	0x08004ab1
 8004a8c:	08004ab9 	.word	0x08004ab9
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a96:	e18a      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9e:	e186      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa6:	e182      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aae:	e17e      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab6:	e17a      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004ab8:	2340      	movs	r3, #64	@ 0x40
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004abe:	e176      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac6:	e172      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5b      	ldr	r2, [pc, #364]	@ (8004c3c <UART_SetConfig+0x63c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d130      	bne.n	8004b34 <UART_SetConfig+0x534>
 8004ad2:	4b58      	ldr	r3, [pc, #352]	@ (8004c34 <UART_SetConfig+0x634>)
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	2b05      	cmp	r3, #5
 8004adc:	d826      	bhi.n	8004b2c <UART_SetConfig+0x52c>
 8004ade:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae4 <UART_SetConfig+0x4e4>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004afd 	.word	0x08004afd
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	08004b0d 	.word	0x08004b0d
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b1d 	.word	0x08004b1d
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b02:	e154      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0a:	e150      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b12:	e14c      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1a:	e148      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e144      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b24:	2340      	movs	r3, #64	@ 0x40
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e140      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b2c:	2380      	movs	r3, #128	@ 0x80
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e13c      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a41      	ldr	r2, [pc, #260]	@ (8004c40 <UART_SetConfig+0x640>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	f040 8082 	bne.w	8004c44 <UART_SetConfig+0x644>
 8004b40:	4b3c      	ldr	r3, [pc, #240]	@ (8004c34 <UART_SetConfig+0x634>)
 8004b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b48:	2b28      	cmp	r3, #40	@ 0x28
 8004b4a:	d86d      	bhi.n	8004c28 <UART_SetConfig+0x628>
 8004b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <UART_SetConfig+0x554>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004bf9 	.word	0x08004bf9
 8004b58:	08004c29 	.word	0x08004c29
 8004b5c:	08004c29 	.word	0x08004c29
 8004b60:	08004c29 	.word	0x08004c29
 8004b64:	08004c29 	.word	0x08004c29
 8004b68:	08004c29 	.word	0x08004c29
 8004b6c:	08004c29 	.word	0x08004c29
 8004b70:	08004c29 	.word	0x08004c29
 8004b74:	08004c01 	.word	0x08004c01
 8004b78:	08004c29 	.word	0x08004c29
 8004b7c:	08004c29 	.word	0x08004c29
 8004b80:	08004c29 	.word	0x08004c29
 8004b84:	08004c29 	.word	0x08004c29
 8004b88:	08004c29 	.word	0x08004c29
 8004b8c:	08004c29 	.word	0x08004c29
 8004b90:	08004c29 	.word	0x08004c29
 8004b94:	08004c09 	.word	0x08004c09
 8004b98:	08004c29 	.word	0x08004c29
 8004b9c:	08004c29 	.word	0x08004c29
 8004ba0:	08004c29 	.word	0x08004c29
 8004ba4:	08004c29 	.word	0x08004c29
 8004ba8:	08004c29 	.word	0x08004c29
 8004bac:	08004c29 	.word	0x08004c29
 8004bb0:	08004c29 	.word	0x08004c29
 8004bb4:	08004c11 	.word	0x08004c11
 8004bb8:	08004c29 	.word	0x08004c29
 8004bbc:	08004c29 	.word	0x08004c29
 8004bc0:	08004c29 	.word	0x08004c29
 8004bc4:	08004c29 	.word	0x08004c29
 8004bc8:	08004c29 	.word	0x08004c29
 8004bcc:	08004c29 	.word	0x08004c29
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c19 	.word	0x08004c19
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c29 	.word	0x08004c29
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e0d6      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e0d2      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e0ce      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e0ca      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c18:	2320      	movs	r3, #32
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1e:	e0c6      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c20:	2340      	movs	r3, #64	@ 0x40
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c26:	e0c2      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c28:	2380      	movs	r3, #128	@ 0x80
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	e0be      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004c30:	40011400 	.word	0x40011400
 8004c34:	58024400 	.word	0x58024400
 8004c38:	40007800 	.word	0x40007800
 8004c3c:	40007c00 	.word	0x40007c00
 8004c40:	40011800 	.word	0x40011800
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4aad      	ldr	r2, [pc, #692]	@ (8004f00 <UART_SetConfig+0x900>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d176      	bne.n	8004d3c <UART_SetConfig+0x73c>
 8004c4e:	4bad      	ldr	r3, [pc, #692]	@ (8004f04 <UART_SetConfig+0x904>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c56:	2b28      	cmp	r3, #40	@ 0x28
 8004c58:	d86c      	bhi.n	8004d34 <UART_SetConfig+0x734>
 8004c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <UART_SetConfig+0x660>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004d05 	.word	0x08004d05
 8004c64:	08004d35 	.word	0x08004d35
 8004c68:	08004d35 	.word	0x08004d35
 8004c6c:	08004d35 	.word	0x08004d35
 8004c70:	08004d35 	.word	0x08004d35
 8004c74:	08004d35 	.word	0x08004d35
 8004c78:	08004d35 	.word	0x08004d35
 8004c7c:	08004d35 	.word	0x08004d35
 8004c80:	08004d0d 	.word	0x08004d0d
 8004c84:	08004d35 	.word	0x08004d35
 8004c88:	08004d35 	.word	0x08004d35
 8004c8c:	08004d35 	.word	0x08004d35
 8004c90:	08004d35 	.word	0x08004d35
 8004c94:	08004d35 	.word	0x08004d35
 8004c98:	08004d35 	.word	0x08004d35
 8004c9c:	08004d35 	.word	0x08004d35
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d35 	.word	0x08004d35
 8004ca8:	08004d35 	.word	0x08004d35
 8004cac:	08004d35 	.word	0x08004d35
 8004cb0:	08004d35 	.word	0x08004d35
 8004cb4:	08004d35 	.word	0x08004d35
 8004cb8:	08004d35 	.word	0x08004d35
 8004cbc:	08004d35 	.word	0x08004d35
 8004cc0:	08004d1d 	.word	0x08004d1d
 8004cc4:	08004d35 	.word	0x08004d35
 8004cc8:	08004d35 	.word	0x08004d35
 8004ccc:	08004d35 	.word	0x08004d35
 8004cd0:	08004d35 	.word	0x08004d35
 8004cd4:	08004d35 	.word	0x08004d35
 8004cd8:	08004d35 	.word	0x08004d35
 8004cdc:	08004d35 	.word	0x08004d35
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d35 	.word	0x08004d35
 8004ce8:	08004d35 	.word	0x08004d35
 8004cec:	08004d35 	.word	0x08004d35
 8004cf0:	08004d35 	.word	0x08004d35
 8004cf4:	08004d35 	.word	0x08004d35
 8004cf8:	08004d35 	.word	0x08004d35
 8004cfc:	08004d35 	.word	0x08004d35
 8004d00:	08004d2d 	.word	0x08004d2d
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e050      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e04c      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d14:	2308      	movs	r3, #8
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e048      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e044      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d24:	2320      	movs	r3, #32
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e040      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d2c:	2340      	movs	r3, #64	@ 0x40
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e03c      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d34:	2380      	movs	r3, #128	@ 0x80
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e038      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a71      	ldr	r2, [pc, #452]	@ (8004f08 <UART_SetConfig+0x908>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d130      	bne.n	8004da8 <UART_SetConfig+0x7a8>
 8004d46:	4b6f      	ldr	r3, [pc, #444]	@ (8004f04 <UART_SetConfig+0x904>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d826      	bhi.n	8004da0 <UART_SetConfig+0x7a0>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <UART_SetConfig+0x758>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d71 	.word	0x08004d71
 8004d5c:	08004d79 	.word	0x08004d79
 8004d60:	08004d81 	.word	0x08004d81
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e01a      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e016      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d80:	2308      	movs	r3, #8
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e012      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e00e      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d90:	2320      	movs	r3, #32
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d96:	e00a      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004d98:	2340      	movs	r3, #64	@ 0x40
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e006      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e002      	b.n	8004dae <UART_SetConfig+0x7ae>
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a55      	ldr	r2, [pc, #340]	@ (8004f08 <UART_SetConfig+0x908>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	f040 80f8 	bne.w	8004faa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	dc46      	bgt.n	8004e50 <UART_SetConfig+0x850>
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	db75      	blt.n	8004eb2 <UART_SetConfig+0x8b2>
 8004dc6:	3b02      	subs	r3, #2
 8004dc8:	2b1e      	cmp	r3, #30
 8004dca:	d872      	bhi.n	8004eb2 <UART_SetConfig+0x8b2>
 8004dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <UART_SetConfig+0x7d4>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004e57 	.word	0x08004e57
 8004dd8:	08004eb3 	.word	0x08004eb3
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004eb3 	.word	0x08004eb3
 8004de4:	08004eb3 	.word	0x08004eb3
 8004de8:	08004eb3 	.word	0x08004eb3
 8004dec:	08004e6f 	.word	0x08004e6f
 8004df0:	08004eb3 	.word	0x08004eb3
 8004df4:	08004eb3 	.word	0x08004eb3
 8004df8:	08004eb3 	.word	0x08004eb3
 8004dfc:	08004eb3 	.word	0x08004eb3
 8004e00:	08004eb3 	.word	0x08004eb3
 8004e04:	08004eb3 	.word	0x08004eb3
 8004e08:	08004eb3 	.word	0x08004eb3
 8004e0c:	08004e7f 	.word	0x08004e7f
 8004e10:	08004eb3 	.word	0x08004eb3
 8004e14:	08004eb3 	.word	0x08004eb3
 8004e18:	08004eb3 	.word	0x08004eb3
 8004e1c:	08004eb3 	.word	0x08004eb3
 8004e20:	08004eb3 	.word	0x08004eb3
 8004e24:	08004eb3 	.word	0x08004eb3
 8004e28:	08004eb3 	.word	0x08004eb3
 8004e2c:	08004eb3 	.word	0x08004eb3
 8004e30:	08004eb3 	.word	0x08004eb3
 8004e34:	08004eb3 	.word	0x08004eb3
 8004e38:	08004eb3 	.word	0x08004eb3
 8004e3c:	08004eb3 	.word	0x08004eb3
 8004e40:	08004eb3 	.word	0x08004eb3
 8004e44:	08004eb3 	.word	0x08004eb3
 8004e48:	08004eb3 	.word	0x08004eb3
 8004e4c:	08004ea5 	.word	0x08004ea5
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d02a      	beq.n	8004eaa <UART_SetConfig+0x8aa>
 8004e54:	e02d      	b.n	8004eb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e56:	f7fe fc7f 	bl	8003758 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e5c:	e02f      	b.n	8004ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fc8e 	bl	8003784 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e6c:	e027      	b.n	8004ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e6e:	f107 0318 	add.w	r3, r7, #24
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fdda 	bl	8003a2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e7c:	e01f      	b.n	8004ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e7e:	4b21      	ldr	r3, [pc, #132]	@ (8004f04 <UART_SetConfig+0x904>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f04 <UART_SetConfig+0x904>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	4a1d      	ldr	r2, [pc, #116]	@ (8004f0c <UART_SetConfig+0x90c>)
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e9c:	e00f      	b.n	8004ebe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <UART_SetConfig+0x90c>)
 8004ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ea2:	e00c      	b.n	8004ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <UART_SetConfig+0x910>)
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ea8:	e009      	b.n	8004ebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb0:	e005      	b.n	8004ebe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 81ee 	beq.w	80052a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <UART_SetConfig+0x914>)
 8004ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ed8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d305      	bcc.n	8004ef6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d910      	bls.n	8004f18 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004efc:	e1d1      	b.n	80052a2 <UART_SetConfig+0xca2>
 8004efe:	bf00      	nop
 8004f00:	40011c00 	.word	0x40011c00
 8004f04:	58024400 	.word	0x58024400
 8004f08:	58000c00 	.word	0x58000c00
 8004f0c:	03d09000 	.word	0x03d09000
 8004f10:	003d0900 	.word	0x003d0900
 8004f14:	08008740 	.word	0x08008740
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	60fa      	str	r2, [r7, #12]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	4ac0      	ldr	r2, [pc, #768]	@ (8005228 <UART_SetConfig+0xc28>)
 8004f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f3a:	f7fb f9e9 	bl	8000310 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	020b      	lsls	r3, r1, #8
 8004f50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f54:	0202      	lsls	r2, r0, #8
 8004f56:	6979      	ldr	r1, [r7, #20]
 8004f58:	6849      	ldr	r1, [r1, #4]
 8004f5a:	0849      	lsrs	r1, r1, #1
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	4605      	mov	r5, r0
 8004f62:	eb12 0804 	adds.w	r8, r2, r4
 8004f66:	eb43 0905 	adc.w	r9, r3, r5
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	469a      	mov	sl, r3
 8004f72:	4693      	mov	fp, r2
 8004f74:	4652      	mov	r2, sl
 8004f76:	465b      	mov	r3, fp
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb f9c8 	bl	8000310 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4613      	mov	r3, r2
 8004f86:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f8e:	d308      	bcc.n	8004fa2 <UART_SetConfig+0x9a2>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f96:	d204      	bcs.n	8004fa2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	e17f      	b.n	80052a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004fa8:	e17b      	b.n	80052a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb2:	f040 80bd 	bne.w	8005130 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004fb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	dc48      	bgt.n	8005050 <UART_SetConfig+0xa50>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	db7b      	blt.n	80050ba <UART_SetConfig+0xaba>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d879      	bhi.n	80050ba <UART_SetConfig+0xaba>
 8004fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <UART_SetConfig+0x9cc>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005057 	.word	0x08005057
 8004fd0:	0800505f 	.word	0x0800505f
 8004fd4:	080050bb 	.word	0x080050bb
 8004fd8:	080050bb 	.word	0x080050bb
 8004fdc:	08005067 	.word	0x08005067
 8004fe0:	080050bb 	.word	0x080050bb
 8004fe4:	080050bb 	.word	0x080050bb
 8004fe8:	080050bb 	.word	0x080050bb
 8004fec:	08005077 	.word	0x08005077
 8004ff0:	080050bb 	.word	0x080050bb
 8004ff4:	080050bb 	.word	0x080050bb
 8004ff8:	080050bb 	.word	0x080050bb
 8004ffc:	080050bb 	.word	0x080050bb
 8005000:	080050bb 	.word	0x080050bb
 8005004:	080050bb 	.word	0x080050bb
 8005008:	080050bb 	.word	0x080050bb
 800500c:	08005087 	.word	0x08005087
 8005010:	080050bb 	.word	0x080050bb
 8005014:	080050bb 	.word	0x080050bb
 8005018:	080050bb 	.word	0x080050bb
 800501c:	080050bb 	.word	0x080050bb
 8005020:	080050bb 	.word	0x080050bb
 8005024:	080050bb 	.word	0x080050bb
 8005028:	080050bb 	.word	0x080050bb
 800502c:	080050bb 	.word	0x080050bb
 8005030:	080050bb 	.word	0x080050bb
 8005034:	080050bb 	.word	0x080050bb
 8005038:	080050bb 	.word	0x080050bb
 800503c:	080050bb 	.word	0x080050bb
 8005040:	080050bb 	.word	0x080050bb
 8005044:	080050bb 	.word	0x080050bb
 8005048:	080050bb 	.word	0x080050bb
 800504c:	080050ad 	.word	0x080050ad
 8005050:	2b40      	cmp	r3, #64	@ 0x40
 8005052:	d02e      	beq.n	80050b2 <UART_SetConfig+0xab2>
 8005054:	e031      	b.n	80050ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005056:	f7fd f971 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 800505a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800505c:	e033      	b.n	80050c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505e:	f7fd f983 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 8005062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005064:	e02f      	b.n	80050c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fb8a 	bl	8003784 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005074:	e027      	b.n	80050c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005076:	f107 0318 	add.w	r3, r7, #24
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fcd6 	bl	8003a2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005084:	e01f      	b.n	80050c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005086:	4b69      	ldr	r3, [pc, #420]	@ (800522c <UART_SetConfig+0xc2c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005092:	4b66      	ldr	r3, [pc, #408]	@ (800522c <UART_SetConfig+0xc2c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	08db      	lsrs	r3, r3, #3
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	4a64      	ldr	r2, [pc, #400]	@ (8005230 <UART_SetConfig+0xc30>)
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050a4:	e00f      	b.n	80050c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80050a6:	4b62      	ldr	r3, [pc, #392]	@ (8005230 <UART_SetConfig+0xc30>)
 80050a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050aa:	e00c      	b.n	80050c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050ac:	4b61      	ldr	r3, [pc, #388]	@ (8005234 <UART_SetConfig+0xc34>)
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b0:	e009      	b.n	80050c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b8:	e005      	b.n	80050c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80ea 	beq.w	80052a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	4a55      	ldr	r2, [pc, #340]	@ (8005228 <UART_SetConfig+0xc28>)
 80050d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d8:	461a      	mov	r2, r3
 80050da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e0:	005a      	lsls	r2, r3, #1
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	441a      	add	r2, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	2b0f      	cmp	r3, #15
 80050f8:	d916      	bls.n	8005128 <UART_SetConfig+0xb28>
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005100:	d212      	bcs.n	8005128 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	b29b      	uxth	r3, r3
 8005106:	f023 030f 	bic.w	r3, r3, #15
 800510a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	b29a      	uxth	r2, r3
 8005118:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800511a:	4313      	orrs	r3, r2
 800511c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	e0bc      	b.n	80052a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800512e:	e0b8      	b.n	80052a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005130:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005134:	2b20      	cmp	r3, #32
 8005136:	dc4b      	bgt.n	80051d0 <UART_SetConfig+0xbd0>
 8005138:	2b00      	cmp	r3, #0
 800513a:	f2c0 8087 	blt.w	800524c <UART_SetConfig+0xc4c>
 800513e:	2b20      	cmp	r3, #32
 8005140:	f200 8084 	bhi.w	800524c <UART_SetConfig+0xc4c>
 8005144:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <UART_SetConfig+0xb4c>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	080051d7 	.word	0x080051d7
 8005150:	080051df 	.word	0x080051df
 8005154:	0800524d 	.word	0x0800524d
 8005158:	0800524d 	.word	0x0800524d
 800515c:	080051e7 	.word	0x080051e7
 8005160:	0800524d 	.word	0x0800524d
 8005164:	0800524d 	.word	0x0800524d
 8005168:	0800524d 	.word	0x0800524d
 800516c:	080051f7 	.word	0x080051f7
 8005170:	0800524d 	.word	0x0800524d
 8005174:	0800524d 	.word	0x0800524d
 8005178:	0800524d 	.word	0x0800524d
 800517c:	0800524d 	.word	0x0800524d
 8005180:	0800524d 	.word	0x0800524d
 8005184:	0800524d 	.word	0x0800524d
 8005188:	0800524d 	.word	0x0800524d
 800518c:	08005207 	.word	0x08005207
 8005190:	0800524d 	.word	0x0800524d
 8005194:	0800524d 	.word	0x0800524d
 8005198:	0800524d 	.word	0x0800524d
 800519c:	0800524d 	.word	0x0800524d
 80051a0:	0800524d 	.word	0x0800524d
 80051a4:	0800524d 	.word	0x0800524d
 80051a8:	0800524d 	.word	0x0800524d
 80051ac:	0800524d 	.word	0x0800524d
 80051b0:	0800524d 	.word	0x0800524d
 80051b4:	0800524d 	.word	0x0800524d
 80051b8:	0800524d 	.word	0x0800524d
 80051bc:	0800524d 	.word	0x0800524d
 80051c0:	0800524d 	.word	0x0800524d
 80051c4:	0800524d 	.word	0x0800524d
 80051c8:	0800524d 	.word	0x0800524d
 80051cc:	0800523f 	.word	0x0800523f
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d037      	beq.n	8005244 <UART_SetConfig+0xc44>
 80051d4:	e03a      	b.n	800524c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d6:	f7fd f8b1 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 80051da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051dc:	e03c      	b.n	8005258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051de:	f7fd f8c3 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 80051e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051e4:	e038      	b.n	8005258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe faca 	bl	8003784 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f4:	e030      	b.n	8005258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051f6:	f107 0318 	add.w	r3, r7, #24
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fc16 	bl	8003a2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005204:	e028      	b.n	8005258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <UART_SetConfig+0xc2c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d012      	beq.n	8005238 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005212:	4b06      	ldr	r3, [pc, #24]	@ (800522c <UART_SetConfig+0xc2c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	4a04      	ldr	r2, [pc, #16]	@ (8005230 <UART_SetConfig+0xc30>)
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005224:	e018      	b.n	8005258 <UART_SetConfig+0xc58>
 8005226:	bf00      	nop
 8005228:	08008740 	.word	0x08008740
 800522c:	58024400 	.word	0x58024400
 8005230:	03d09000 	.word	0x03d09000
 8005234:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005238:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <UART_SetConfig+0xccc>)
 800523a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800523c:	e00c      	b.n	8005258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800523e:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <UART_SetConfig+0xcd0>)
 8005240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005242:	e009      	b.n	8005258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800524a:	e005      	b.n	8005258 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005256:	bf00      	nop
    }

    if (pclk != 0U)
 8005258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d021      	beq.n	80052a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	4a1c      	ldr	r2, [pc, #112]	@ (80052d4 <UART_SetConfig+0xcd4>)
 8005264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005268:	461a      	mov	r2, r3
 800526a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	441a      	add	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d909      	bls.n	800529c <UART_SetConfig+0xc9c>
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528e:	d205      	bcs.n	800529c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	b29a      	uxth	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	e002      	b.n	80052a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2200      	movs	r2, #0
 80052bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3748      	adds	r7, #72	@ 0x48
 80052c6:	46bd      	mov	sp, r7
 80052c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052cc:	03d09000 	.word	0x03d09000
 80052d0:	003d0900 	.word	0x003d0900
 80052d4:	08008740 	.word	0x08008740

080052d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01a      	beq.n	80053ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d6:	d10a      	bne.n	80053ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b098      	sub	sp, #96	@ 0x60
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800542c:	f7fb fd2c 	bl	8000e88 <HAL_GetTick>
 8005430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b08      	cmp	r3, #8
 800543e:	d12f      	bne.n	80054a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005448:	2200      	movs	r2, #0
 800544a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f88e 	bl	8005570 <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d022      	beq.n	80054a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800546e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005478:	647b      	str	r3, [r7, #68]	@ 0x44
 800547a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800547e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e6      	bne.n	800545a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e063      	b.n	8005568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d149      	bne.n	8005542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b6:	2200      	movs	r2, #0
 80054b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f857 	bl	8005570 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d03c      	beq.n	8005542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	623b      	str	r3, [r7, #32]
   return(result);
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e6      	bne.n	80054c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	60fb      	str	r3, [r7, #12]
   return(result);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3308      	adds	r3, #8
 8005518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800551a:	61fa      	str	r2, [r7, #28]
 800551c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	69b9      	ldr	r1, [r7, #24]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	617b      	str	r3, [r7, #20]
   return(result);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e012      	b.n	8005568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3758      	adds	r7, #88	@ 0x58
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005580:	e04f      	b.n	8005622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d04b      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fb fc7d 	bl	8000e88 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e04e      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d037      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b80      	cmp	r3, #128	@ 0x80
 80055b6:	d034      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b40      	cmp	r3, #64	@ 0x40
 80055bc:	d031      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d110      	bne.n	80055ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2208      	movs	r2, #8
 80055d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f839 	bl	800564c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2208      	movs	r2, #8
 80055de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e029      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055fc:	d111      	bne.n	8005622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f81f 	bl	800564c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e00f      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	429a      	cmp	r2, r3
 800563e:	d0a0      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b095      	sub	sp, #84	@ 0x54
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005672:	643b      	str	r3, [r7, #64]	@ 0x40
 8005674:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e6      	bne.n	8005654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3308      	adds	r3, #8
 800568c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	61fb      	str	r3, [r7, #28]
   return(result);
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <UART_EndRxTransfer+0xc8>)
 800569a:	4013      	ands	r3, r2
 800569c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3308      	adds	r3, #8
 80056a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d118      	bne.n	80056f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 0310 	bic.w	r3, r3, #16
 80056d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6979      	ldr	r1, [r7, #20]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	613b      	str	r3, [r7, #16]
   return(result);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e6      	bne.n	80056c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005708:	bf00      	nop
 800570a:	3754      	adds	r7, #84	@ 0x54
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	effffffe 	.word	0xeffffffe

08005718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_UARTEx_DisableFifoMode+0x16>
 800572a:	2302      	movs	r3, #2
 800572c:	e027      	b.n	800577e <HAL_UARTEx_DisableFifoMode+0x66>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2224      	movs	r2, #36	@ 0x24
 800573a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800575c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800579e:	2302      	movs	r3, #2
 80057a0:	e02d      	b.n	80057fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2224      	movs	r2, #36	@ 0x24
 80057ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f850 	bl	8005884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800581a:	2302      	movs	r3, #2
 800581c:	e02d      	b.n	800587a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2224      	movs	r2, #36	@ 0x24
 800582a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f812 	bl	8005884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005890:	2b00      	cmp	r3, #0
 8005892:	d108      	bne.n	80058a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058a4:	e031      	b.n	800590a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058a6:	2310      	movs	r3, #16
 80058a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058aa:	2310      	movs	r3, #16
 80058ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0e5b      	lsrs	r3, r3, #25
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	0f5b      	lsrs	r3, r3, #29
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	7b3a      	ldrb	r2, [r7, #12]
 80058d2:	4911      	ldr	r1, [pc, #68]	@ (8005918 <UARTEx_SetNbDataToProcess+0x94>)
 80058d4:	5c8a      	ldrb	r2, [r1, r2]
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058da:	7b3a      	ldrb	r2, [r7, #12]
 80058dc:	490f      	ldr	r1, [pc, #60]	@ (800591c <UARTEx_SetNbDataToProcess+0x98>)
 80058de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	7b7a      	ldrb	r2, [r7, #13]
 80058f0:	4909      	ldr	r1, [pc, #36]	@ (8005918 <UARTEx_SetNbDataToProcess+0x94>)
 80058f2:	5c8a      	ldrb	r2, [r1, r2]
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058f8:	7b7a      	ldrb	r2, [r7, #13]
 80058fa:	4908      	ldr	r1, [pc, #32]	@ (800591c <UARTEx_SetNbDataToProcess+0x98>)
 80058fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	08008758 	.word	0x08008758
 800591c:	08008760 	.word	0x08008760

08005920 <__NVIC_SetPriority>:
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	6039      	str	r1, [r7, #0]
 800592a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800592c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	db0a      	blt.n	800594a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	b2da      	uxtb	r2, r3
 8005938:	490c      	ldr	r1, [pc, #48]	@ (800596c <__NVIC_SetPriority+0x4c>)
 800593a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800593e:	0112      	lsls	r2, r2, #4
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	440b      	add	r3, r1
 8005944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005948:	e00a      	b.n	8005960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4908      	ldr	r1, [pc, #32]	@ (8005970 <__NVIC_SetPriority+0x50>)
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	3b04      	subs	r3, #4
 8005958:	0112      	lsls	r2, r2, #4
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	440b      	add	r3, r1
 800595e:	761a      	strb	r2, [r3, #24]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	e000e100 	.word	0xe000e100
 8005970:	e000ed00 	.word	0xe000ed00

08005974 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005978:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <SysTick_Handler+0x1c>)
 800597a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800597c:	f001 fd46 	bl	800740c <xTaskGetSchedulerState>
 8005980:	4603      	mov	r3, r0
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005986:	f002 fb3f 	bl	8008008 <xPortSysTickHandler>
  }
}
 800598a:	bf00      	nop
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	e000e010 	.word	0xe000e010

08005994 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005998:	2100      	movs	r1, #0
 800599a:	f06f 0004 	mvn.w	r0, #4
 800599e:	f7ff ffbf 	bl	8005920 <__NVIC_SetPriority>
#endif
}
 80059a2:	bf00      	nop
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ae:	f3ef 8305 	mrs	r3, IPSR
 80059b2:	603b      	str	r3, [r7, #0]
  return(result);
 80059b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059ba:	f06f 0305 	mvn.w	r3, #5
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	e00c      	b.n	80059dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059c2:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <osKernelInitialize+0x44>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059ca:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <osKernelInitialize+0x44>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	e002      	b.n	80059dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059dc:	687b      	ldr	r3, [r7, #4]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	24000174 	.word	0x24000174

080059f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f6:	f3ef 8305 	mrs	r3, IPSR
 80059fa:	603b      	str	r3, [r7, #0]
  return(result);
 80059fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a02:	f06f 0305 	mvn.w	r3, #5
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	e010      	b.n	8005a2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <osKernelStart+0x48>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d109      	bne.n	8005a26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a12:	f7ff ffbf 	bl	8005994 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a16:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <osKernelStart+0x48>)
 8005a18:	2202      	movs	r2, #2
 8005a1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a1c:	f001 f892 	bl	8006b44 <vTaskStartScheduler>
      stat = osOK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	e002      	b.n	8005a2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a2c:	687b      	ldr	r3, [r7, #4]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	24000174 	.word	0x24000174

08005a3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08e      	sub	sp, #56	@ 0x38
 8005a40:	af04      	add	r7, sp, #16
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a4c:	f3ef 8305 	mrs	r3, IPSR
 8005a50:	617b      	str	r3, [r7, #20]
  return(result);
 8005a52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d17e      	bne.n	8005b56 <osThreadNew+0x11a>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d07b      	beq.n	8005b56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a5e:	2380      	movs	r3, #128	@ 0x80
 8005a60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a62:	2318      	movs	r3, #24
 8005a64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d045      	beq.n	8005b02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <osThreadNew+0x48>
        name = attr->name;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <osThreadNew+0x6e>
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b38      	cmp	r3, #56	@ 0x38
 8005a9c:	d805      	bhi.n	8005aaa <osThreadNew+0x6e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <osThreadNew+0x72>
        return (NULL);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e054      	b.n	8005b58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00e      	beq.n	8005ae4 <osThreadNew+0xa8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	2ba7      	cmp	r3, #167	@ 0xa7
 8005acc:	d90a      	bls.n	8005ae4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <osThreadNew+0xa8>
        mem = 1;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e010      	b.n	8005b06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10c      	bne.n	8005b06 <osThreadNew+0xca>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <osThreadNew+0xca>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <osThreadNew+0xca>
          mem = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e001      	b.n	8005b06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d110      	bne.n	8005b2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b14:	9202      	str	r2, [sp, #8]
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6a3a      	ldr	r2, [r7, #32]
 8005b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fe1a 	bl	800675c <xTaskCreateStatic>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e013      	b.n	8005b56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d110      	bne.n	8005b56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f107 0310 	add.w	r3, r7, #16
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fe68 	bl	800681c <xTaskCreate>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <osThreadNew+0x11a>
            hTask = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b56:	693b      	ldr	r3, [r7, #16]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3728      	adds	r7, #40	@ 0x28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b68:	f3ef 8305 	mrs	r3, IPSR
 8005b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <osDelay+0x1c>
    stat = osErrorISR;
 8005b74:	f06f 0305 	mvn.w	r3, #5
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e007      	b.n	8005b8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 ffa6 	bl	8006ad8 <vTaskDelay>
    }
  }

  return (stat);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4a06      	ldr	r2, [pc, #24]	@ (8005bc8 <vApplicationGetIdleTaskMemory+0x30>)
 8005bae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2280      	movs	r2, #128	@ 0x80
 8005bb4:	601a      	str	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	24000178 	.word	0x24000178
 8005bc8:	24000220 	.word	0x24000220

08005bcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4a06      	ldr	r2, [pc, #24]	@ (8005bfc <vApplicationGetTimerTaskMemory+0x30>)
 8005be2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	24000420 	.word	0x24000420
 8005bfc:	240004c8 	.word	0x240004c8

08005c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f103 0208 	add.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f103 0208 	add.w	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f103 0208 	add.w	r2, r3, #8
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d103      	bne.n	8005cc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e00c      	b.n	8005cdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e002      	b.n	8005cd0 <vListInsert+0x2e>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d2f6      	bcs.n	8005cca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6892      	ldr	r2, [r2, #8]
 8005d2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6852      	ldr	r2, [r2, #4]
 8005d34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d103      	bne.n	8005d48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	1e5a      	subs	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <xQueueGenericReset+0x2c>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60bb      	str	r3, [r7, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d94:	f002 f8a8 	bl	8007ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	68f9      	ldr	r1, [r7, #12]
 8005da2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	441a      	add	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	22ff      	movs	r2, #255	@ 0xff
 8005dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	22ff      	movs	r2, #255	@ 0xff
 8005de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d114      	bne.n	8005e14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01a      	beq.n	8005e28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3310      	adds	r3, #16
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f942 	bl	8007080 <xTaskRemoveFromEventList>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d012      	beq.n	8005e28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e02:	4b0d      	ldr	r3, [pc, #52]	@ (8005e38 <xQueueGenericReset+0xd0>)
 8005e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	e009      	b.n	8005e28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3310      	adds	r3, #16
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fef1 	bl	8005c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3324      	adds	r3, #36	@ 0x24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff feec 	bl	8005c00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e28:	f002 f890 	bl	8007f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e2c:	2301      	movs	r3, #1
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	@ 0x38
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10b      	bne.n	8005e86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <xQueueGenericCreateStatic+0x56>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <xQueueGenericCreateStatic+0x5a>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <xQueueGenericCreateStatic+0x5c>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	623b      	str	r3, [r7, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	e7fd      	b.n	8005eb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <xQueueGenericCreateStatic+0x84>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <xQueueGenericCreateStatic+0x88>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <xQueueGenericCreateStatic+0x8a>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	61fb      	str	r3, [r7, #28]
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	e7fd      	b.n	8005ede <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ee2:	2350      	movs	r3, #80	@ 0x50
 8005ee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b50      	cmp	r3, #80	@ 0x50
 8005eea:	d00b      	beq.n	8005f04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61bb      	str	r3, [r7, #24]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f805 	bl	8005f36 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3730      	adds	r7, #48	@ 0x30
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e002      	b.n	8005f58 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f64:	2101      	movs	r1, #1
 8005f66:	69b8      	ldr	r0, [r7, #24]
 8005f68:	f7ff fefe 	bl	8005d68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08e      	sub	sp, #56	@ 0x38
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <xQueueGenericSend+0x34>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <xQueueGenericSend+0x42>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xQueueGenericSend+0x46>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <xQueueGenericSend+0x48>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <xQueueGenericSend+0x64>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d103      	bne.n	8005fee <xQueueGenericSend+0x72>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericSend+0x76>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericSend+0x78>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xQueueGenericSend+0x94>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	623b      	str	r3, [r7, #32]
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006010:	f001 f9fc 	bl	800740c <xTaskGetSchedulerState>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <xQueueGenericSend+0xa4>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <xQueueGenericSend+0xa8>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <xQueueGenericSend+0xaa>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <xQueueGenericSend+0xc6>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	61fb      	str	r3, [r7, #28]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006042:	f001 ff51 	bl	8007ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <xQueueGenericSend+0xdc>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d129      	bne.n	80060ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800605e:	f000 fa0f 	bl	8006480 <prvCopyDataToQueue>
 8006062:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	3324      	adds	r3, #36	@ 0x24
 8006070:	4618      	mov	r0, r3
 8006072:	f001 f805 	bl	8007080 <xTaskRemoveFromEventList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d013      	beq.n	80060a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800607c:	4b3f      	ldr	r3, [pc, #252]	@ (800617c <xQueueGenericSend+0x200>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	e00a      	b.n	80060a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006094:	4b39      	ldr	r3, [pc, #228]	@ (800617c <xQueueGenericSend+0x200>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060a4:	f001 ff52 	bl	8007f4c <vPortExitCritical>
				return pdPASS;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e063      	b.n	8006174 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060b2:	f001 ff4b 	bl	8007f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e05c      	b.n	8006174 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f83f 	bl	8007148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ce:	f001 ff3d 	bl	8007f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060d2:	f000 fda7 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060d6:	f001 ff07 	bl	8007ee8 <vPortEnterCritical>
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e0:	b25b      	sxtb	r3, r3
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d103      	bne.n	80060f0 <xQueueGenericSend+0x174>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d103      	bne.n	8006106 <xQueueGenericSend+0x18a>
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006106:	f001 ff21 	bl	8007f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800610a:	1d3a      	adds	r2, r7, #4
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f001 f82e 	bl	8007174 <xTaskCheckForTimeOut>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d124      	bne.n	8006168 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800611e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006120:	f000 faa6 	bl	8006670 <prvIsQueueFull>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	3310      	adds	r3, #16
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff52 	bl	8006fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800613a:	f000 fa31 	bl	80065a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800613e:	f000 fd7f 	bl	8006c40 <xTaskResumeAll>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	f47f af7c 	bne.w	8006042 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800614a:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <xQueueGenericSend+0x200>)
 800614c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	e772      	b.n	8006042 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800615c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800615e:	f000 fa1f 	bl	80065a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006162:	f000 fd6d 	bl	8006c40 <xTaskResumeAll>
 8006166:	e76c      	b.n	8006042 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800616a:	f000 fa19 	bl	80065a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800616e:	f000 fd67 	bl	8006c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006172:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006174:	4618      	mov	r0, r3
 8006176:	3738      	adds	r7, #56	@ 0x38
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b090      	sub	sp, #64	@ 0x40
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <xQueueGenericSendFromISR+0x3e>
 80061b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueGenericSendFromISR+0x42>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericSendFromISR+0x44>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d103      	bne.n	80061ee <xQueueGenericSendFromISR+0x6e>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <xQueueGenericSendFromISR+0x72>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericSendFromISR+0x74>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	623b      	str	r3, [r7, #32]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006210:	f001 ff4a 	bl	80080a8 <vPortValidateInterruptPriority>
	__asm volatile
 8006214:	f3ef 8211 	mrs	r2, BASEPRI
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	61fa      	str	r2, [r7, #28]
 800622a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800622c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <xQueueGenericSendFromISR+0xc2>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d12f      	bne.n	80062a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006258:	f000 f912 	bl	8006480 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800625c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d112      	bne.n	800628c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	3324      	adds	r3, #36	@ 0x24
 8006272:	4618      	mov	r0, r3
 8006274:	f000 ff04 	bl	8007080 <xTaskRemoveFromEventList>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e007      	b.n	800629c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800628c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006290:	3301      	adds	r3, #1
 8006292:	b2db      	uxtb	r3, r3
 8006294:	b25a      	sxtb	r2, r3
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800629c:	2301      	movs	r3, #1
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80062a0:	e001      	b.n	80062a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f383 8811 	msr	BASEPRI, r3
}
 80062b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3740      	adds	r7, #64	@ 0x40
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	@ 0x30
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10b      	bne.n	80062ee <xQueueReceive+0x32>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	623b      	str	r3, [r7, #32]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <xQueueReceive+0x40>
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <xQueueReceive+0x44>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <xQueueReceive+0x46>
 8006300:	2300      	movs	r3, #0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <xQueueReceive+0x62>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	61fb      	str	r3, [r7, #28]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800631e:	f001 f875 	bl	800740c <xTaskGetSchedulerState>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <xQueueReceive+0x72>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <xQueueReceive+0x76>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <xQueueReceive+0x78>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <xQueueReceive+0x94>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	61bb      	str	r3, [r7, #24]
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006350:	f001 fdca 	bl	8007ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01f      	beq.n	80063a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006364:	f000 f8f6 	bl	8006554 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	3310      	adds	r3, #16
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fe7f 	bl	8007080 <xTaskRemoveFromEventList>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006388:	4b3c      	ldr	r3, [pc, #240]	@ (800647c <xQueueReceive+0x1c0>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006398:	f001 fdd8 	bl	8007f4c <vPortExitCritical>
				return pdPASS;
 800639c:	2301      	movs	r3, #1
 800639e:	e069      	b.n	8006474 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063a6:	f001 fdd1 	bl	8007f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e062      	b.n	8006474 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063b4:	f107 0310 	add.w	r3, r7, #16
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fec5 	bl	8007148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063be:	2301      	movs	r3, #1
 80063c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063c2:	f001 fdc3 	bl	8007f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063c6:	f000 fc2d 	bl	8006c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ca:	f001 fd8d 	bl	8007ee8 <vPortEnterCritical>
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063d4:	b25b      	sxtb	r3, r3
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d103      	bne.n	80063e4 <xQueueReceive+0x128>
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d103      	bne.n	80063fa <xQueueReceive+0x13e>
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063fa:	f001 fda7 	bl	8007f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063fe:	1d3a      	adds	r2, r7, #4
 8006400:	f107 0310 	add.w	r3, r7, #16
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 feb4 	bl	8007174 <xTaskCheckForTimeOut>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d123      	bne.n	800645a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006414:	f000 f916 	bl	8006644 <prvIsQueueEmpty>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d017      	beq.n	800644e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	3324      	adds	r3, #36	@ 0x24
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fdd8 	bl	8006fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800642c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800642e:	f000 f8b7 	bl	80065a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006432:	f000 fc05 	bl	8006c40 <xTaskResumeAll>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d189      	bne.n	8006350 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800643c:	4b0f      	ldr	r3, [pc, #60]	@ (800647c <xQueueReceive+0x1c0>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	e780      	b.n	8006350 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800644e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006450:	f000 f8a6 	bl	80065a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006454:	f000 fbf4 	bl	8006c40 <xTaskResumeAll>
 8006458:	e77a      	b.n	8006350 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800645a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800645c:	f000 f8a0 	bl	80065a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006460:	f000 fbee 	bl	8006c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006466:	f000 f8ed 	bl	8006644 <prvIsQueueEmpty>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	f43f af6f 	beq.w	8006350 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006472:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006474:	4618      	mov	r0, r3
 8006476:	3730      	adds	r7, #48	@ 0x30
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10d      	bne.n	80064ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d14d      	bne.n	8006542 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 ffcc 	bl	8007448 <xTaskPriorityDisinherit>
 80064b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	e043      	b.n	8006542 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d119      	bne.n	80064f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6858      	ldr	r0, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c8:	461a      	mov	r2, r3
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	f002 f8aa 	bl	8008624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d8:	441a      	add	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d32b      	bcc.n	8006542 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	e026      	b.n	8006542 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68d8      	ldr	r0, [r3, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	461a      	mov	r2, r3
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	f002 f890 	bl	8008624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650c:	425b      	negs	r3, r3
 800650e:	441a      	add	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d207      	bcs.n	8006530 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	425b      	negs	r3, r3
 800652a:	441a      	add	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d105      	bne.n	8006542 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	3b01      	subs	r3, #1
 8006540:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800654a:	697b      	ldr	r3, [r7, #20]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d018      	beq.n	8006598 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	441a      	add	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d303      	bcc.n	8006588 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68d9      	ldr	r1, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	461a      	mov	r2, r3
 8006592:	6838      	ldr	r0, [r7, #0]
 8006594:	f002 f846 	bl	8008624 <memcpy>
	}
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065a8:	f001 fc9e 	bl	8007ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065b4:	e011      	b.n	80065da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d012      	beq.n	80065e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3324      	adds	r3, #36	@ 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fd5c 	bl	8007080 <xTaskRemoveFromEventList>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065ce:	f000 fe35 	bl	800723c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dce9      	bgt.n	80065b6 <prvUnlockQueue+0x16>
 80065e2:	e000      	b.n	80065e6 <prvUnlockQueue+0x46>
					break;
 80065e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	22ff      	movs	r2, #255	@ 0xff
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80065ee:	f001 fcad 	bl	8007f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065f2:	f001 fc79 	bl	8007ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065fe:	e011      	b.n	8006624 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3310      	adds	r3, #16
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fd37 	bl	8007080 <xTaskRemoveFromEventList>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006618:	f000 fe10 	bl	800723c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	3b01      	subs	r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006628:	2b00      	cmp	r3, #0
 800662a:	dce9      	bgt.n	8006600 <prvUnlockQueue+0x60>
 800662c:	e000      	b.n	8006630 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800662e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	22ff      	movs	r2, #255	@ 0xff
 8006634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006638:	f001 fc88 	bl	8007f4c <vPortExitCritical>
}
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800664c:	f001 fc4c 	bl	8007ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e001      	b.n	8006662 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006662:	f001 fc73 	bl	8007f4c <vPortExitCritical>

	return xReturn;
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006678:	f001 fc36 	bl	8007ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006684:	429a      	cmp	r2, r3
 8006686:	d102      	bne.n	800668e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	e001      	b.n	8006692 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006692:	f001 fc5b 	bl	8007f4c <vPortExitCritical>

	return xReturn;
 8006696:	68fb      	ldr	r3, [r7, #12]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e014      	b.n	80066da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066b0:	4a0f      	ldr	r2, [pc, #60]	@ (80066f0 <vQueueAddToRegistry+0x50>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10b      	bne.n	80066d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066bc:	490c      	ldr	r1, [pc, #48]	@ (80066f0 <vQueueAddToRegistry+0x50>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066c6:	4a0a      	ldr	r2, [pc, #40]	@ (80066f0 <vQueueAddToRegistry+0x50>)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4413      	add	r3, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066d2:	e006      	b.n	80066e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3301      	adds	r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b07      	cmp	r3, #7
 80066de:	d9e7      	bls.n	80066b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	240008c8 	.word	0x240008c8

080066f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006704:	f001 fbf0 	bl	8007ee8 <vPortEnterCritical>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800670e:	b25b      	sxtb	r3, r3
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d103      	bne.n	800671e <vQueueWaitForMessageRestricted+0x2a>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006724:	b25b      	sxtb	r3, r3
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d103      	bne.n	8006734 <vQueueWaitForMessageRestricted+0x40>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006734:	f001 fc0a 	bl	8007f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3324      	adds	r3, #36	@ 0x24
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fc6d 	bl	8007028 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800674e:	6978      	ldr	r0, [r7, #20]
 8006750:	f7ff ff26 	bl	80065a0 <prvUnlockQueue>
	}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08e      	sub	sp, #56	@ 0x38
 8006760:	af04      	add	r7, sp, #16
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800676a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	623b      	str	r3, [r7, #32]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10b      	bne.n	80067a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	61fb      	str	r3, [r7, #28]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067a6:	23a8      	movs	r3, #168	@ 0xa8
 80067a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2ba8      	cmp	r3, #168	@ 0xa8
 80067ae:	d00b      	beq.n	80067c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	61bb      	str	r3, [r7, #24]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01e      	beq.n	800680e <xTaskCreateStatic+0xb2>
 80067d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01b      	beq.n	800680e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067e8:	2300      	movs	r3, #0
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f851 	bl	80068a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006806:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006808:	f000 f8f6 	bl	80069f8 <prvAddNewTaskToReadyList>
 800680c:	e001      	b.n	8006812 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006812:	697b      	ldr	r3, [r7, #20]
	}
 8006814:	4618      	mov	r0, r3
 8006816:	3728      	adds	r7, #40	@ 0x28
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08c      	sub	sp, #48	@ 0x30
 8006820:	af04      	add	r7, sp, #16
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f001 fc7b 	bl	800812c <pvPortMalloc>
 8006836:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800683e:	20a8      	movs	r0, #168	@ 0xa8
 8006840:	f001 fc74 	bl	800812c <pvPortMalloc>
 8006844:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	631a      	str	r2, [r3, #48]	@ 0x30
 8006852:	e005      	b.n	8006860 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006854:	6978      	ldr	r0, [r7, #20]
 8006856:	f001 fd37 	bl	80082c8 <vPortFree>
 800685a:	e001      	b.n	8006860 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d017      	beq.n	8006896 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	2300      	movs	r3, #0
 8006872:	9303      	str	r3, [sp, #12]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	9302      	str	r3, [sp, #8]
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f80f 	bl	80068a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800688a:	69f8      	ldr	r0, [r7, #28]
 800688c:	f000 f8b4 	bl	80069f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006890:	2301      	movs	r3, #1
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	e002      	b.n	800689c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800689c:	69bb      	ldr	r3, [r7, #24]
	}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	461a      	mov	r2, r3
 80068c0:	21a5      	movs	r1, #165	@ 0xa5
 80068c2:	f001 fe2d 	bl	8008520 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80068d0:	440b      	add	r3, r1
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f023 0307 	bic.w	r3, r3, #7
 80068de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01f      	beq.n	8006948 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006908:	2300      	movs	r3, #0
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	e012      	b.n	8006934 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	7819      	ldrb	r1, [r3, #0]
 8006916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	3334      	adds	r3, #52	@ 0x34
 800691e:	460a      	mov	r2, r1
 8006920:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d006      	beq.n	800693c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3301      	adds	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d9e9      	bls.n	800690e <prvInitialiseNewTask+0x66>
 800693a:	e000      	b.n	800693e <prvInitialiseNewTask+0x96>
			{
				break;
 800693c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006946:	e003      	b.n	8006950 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	2b37      	cmp	r3, #55	@ 0x37
 8006954:	d901      	bls.n	800695a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006956:	2337      	movs	r3, #55	@ 0x37
 8006958:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800695e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006964:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2200      	movs	r2, #0
 800696a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	3304      	adds	r3, #4
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff f965 	bl	8005c40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	3318      	adds	r3, #24
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff f960 	bl	8005c40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006984:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006988:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006994:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	2200      	movs	r2, #0
 800699a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	3354      	adds	r3, #84	@ 0x54
 80069aa:	224c      	movs	r2, #76	@ 0x4c
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 fdb6 	bl	8008520 <memset>
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	4a0d      	ldr	r2, [pc, #52]	@ (80069ec <prvInitialiseNewTask+0x144>)
 80069b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	4a0c      	ldr	r2, [pc, #48]	@ (80069f0 <prvInitialiseNewTask+0x148>)
 80069be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	4a0c      	ldr	r2, [pc, #48]	@ (80069f4 <prvInitialiseNewTask+0x14c>)
 80069c4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	69b8      	ldr	r0, [r7, #24]
 80069cc:	f001 f95a 	bl	8007c84 <pxPortInitialiseStack>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e2:	bf00      	nop
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	24004b60 	.word	0x24004b60
 80069f0:	24004bc8 	.word	0x24004bc8
 80069f4:	24004c30 	.word	0x24004c30

080069f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a00:	f001 fa72 	bl	8007ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a04:	4b2d      	ldr	r3, [pc, #180]	@ (8006abc <prvAddNewTaskToReadyList+0xc4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006abc <prvAddNewTaskToReadyList+0xc4>)
 8006a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ac0 <prvAddNewTaskToReadyList+0xc8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a16:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac0 <prvAddNewTaskToReadyList+0xc8>)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a1c:	4b27      	ldr	r3, [pc, #156]	@ (8006abc <prvAddNewTaskToReadyList+0xc4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d110      	bne.n	8006a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a24:	f000 fc2e 	bl	8007284 <prvInitialiseTaskLists>
 8006a28:	e00d      	b.n	8006a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a2a:	4b26      	ldr	r3, [pc, #152]	@ (8006ac4 <prvAddNewTaskToReadyList+0xcc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a32:	4b23      	ldr	r3, [pc, #140]	@ (8006ac0 <prvAddNewTaskToReadyList+0xc8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d802      	bhi.n	8006a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a40:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac0 <prvAddNewTaskToReadyList+0xc8>)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a46:	4b20      	ldr	r3, [pc, #128]	@ (8006ac8 <prvAddNewTaskToReadyList+0xd0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <prvAddNewTaskToReadyList+0xd0>)
 8006a4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <prvAddNewTaskToReadyList+0xd0>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006acc <prvAddNewTaskToReadyList+0xd4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d903      	bls.n	8006a6c <prvAddNewTaskToReadyList+0x74>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <prvAddNewTaskToReadyList+0xd4>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4a15      	ldr	r2, [pc, #84]	@ (8006ad0 <prvAddNewTaskToReadyList+0xd8>)
 8006a7a:	441a      	add	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	f7ff f8e9 	bl	8005c5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a88:	f001 fa60 	bl	8007f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <prvAddNewTaskToReadyList+0xcc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a94:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <prvAddNewTaskToReadyList+0xc8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d207      	bcs.n	8006ab2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad4 <prvAddNewTaskToReadyList+0xdc>)
 8006aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	24000ddc 	.word	0x24000ddc
 8006ac0:	24000908 	.word	0x24000908
 8006ac4:	24000de8 	.word	0x24000de8
 8006ac8:	24000df8 	.word	0x24000df8
 8006acc:	24000de4 	.word	0x24000de4
 8006ad0:	2400090c 	.word	0x2400090c
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d018      	beq.n	8006b1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006aea:	4b14      	ldr	r3, [pc, #80]	@ (8006b3c <vTaskDelay+0x64>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <vTaskDelay+0x32>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60bb      	str	r3, [r7, #8]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b0a:	f000 f88b 	bl	8006c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fd09 	bl	8007528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b16:	f000 f893 	bl	8006c40 <xTaskResumeAll>
 8006b1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b22:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <vTaskDelay+0x68>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	24000e04 	.word	0x24000e04
 8006b40:	e000ed04 	.word	0xe000ed04

08006b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b52:	463a      	mov	r2, r7
 8006b54:	1d39      	adds	r1, r7, #4
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff f81c 	bl	8005b98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	9202      	str	r2, [sp, #8]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	460a      	mov	r2, r1
 8006b72:	4924      	ldr	r1, [pc, #144]	@ (8006c04 <vTaskStartScheduler+0xc0>)
 8006b74:	4824      	ldr	r0, [pc, #144]	@ (8006c08 <vTaskStartScheduler+0xc4>)
 8006b76:	f7ff fdf1 	bl	800675c <xTaskCreateStatic>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4a23      	ldr	r2, [pc, #140]	@ (8006c0c <vTaskStartScheduler+0xc8>)
 8006b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b80:	4b22      	ldr	r3, [pc, #136]	@ (8006c0c <vTaskStartScheduler+0xc8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e001      	b.n	8006b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d102      	bne.n	8006b9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b98:	f000 fd1a 	bl	80075d0 <xTimerCreateTimerTask>
 8006b9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d11b      	bne.n	8006bdc <vTaskStartScheduler+0x98>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	613b      	str	r3, [r7, #16]
}
 8006bb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bb8:	4b15      	ldr	r3, [pc, #84]	@ (8006c10 <vTaskStartScheduler+0xcc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3354      	adds	r3, #84	@ 0x54
 8006bbe:	4a15      	ldr	r2, [pc, #84]	@ (8006c14 <vTaskStartScheduler+0xd0>)
 8006bc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc2:	4b15      	ldr	r3, [pc, #84]	@ (8006c18 <vTaskStartScheduler+0xd4>)
 8006bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bca:	4b14      	ldr	r3, [pc, #80]	@ (8006c1c <vTaskStartScheduler+0xd8>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bd0:	4b13      	ldr	r3, [pc, #76]	@ (8006c20 <vTaskStartScheduler+0xdc>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bd6:	f001 f8e3 	bl	8007da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bda:	e00f      	b.n	8006bfc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d10b      	bne.n	8006bfc <vTaskStartScheduler+0xb8>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <vTaskStartScheduler+0xb4>
}
 8006bfc:	bf00      	nop
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	080086f4 	.word	0x080086f4
 8006c08:	08007255 	.word	0x08007255
 8006c0c:	24000e00 	.word	0x24000e00
 8006c10:	24000908 	.word	0x24000908
 8006c14:	24000014 	.word	0x24000014
 8006c18:	24000dfc 	.word	0x24000dfc
 8006c1c:	24000de8 	.word	0x24000de8
 8006c20:	24000de0 	.word	0x24000de0

08006c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <vTaskSuspendAll+0x18>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a03      	ldr	r2, [pc, #12]	@ (8006c3c <vTaskSuspendAll+0x18>)
 8006c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	24000e04 	.word	0x24000e04

08006c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c4e:	4b42      	ldr	r3, [pc, #264]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <xTaskResumeAll+0x2e>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	603b      	str	r3, [r7, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c6e:	f001 f93b 	bl	8007ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c72:	4b39      	ldr	r3, [pc, #228]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	@ (8006d58 <xTaskResumeAll+0x118>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d162      	bne.n	8006d4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c84:	4b35      	ldr	r3, [pc, #212]	@ (8006d5c <xTaskResumeAll+0x11c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d05e      	beq.n	8006d4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c8c:	e02f      	b.n	8006cee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8e:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <xTaskResumeAll+0x120>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3318      	adds	r3, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff f83a 	bl	8005d14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff f835 	bl	8005d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	4b2d      	ldr	r3, [pc, #180]	@ (8006d64 <xTaskResumeAll+0x124>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d903      	bls.n	8006cbe <xTaskResumeAll+0x7e>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	4a2a      	ldr	r2, [pc, #168]	@ (8006d64 <xTaskResumeAll+0x124>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a27      	ldr	r2, [pc, #156]	@ (8006d68 <xTaskResumeAll+0x128>)
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7fe ffc0 	bl	8005c5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4b23      	ldr	r3, [pc, #140]	@ (8006d6c <xTaskResumeAll+0x12c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d302      	bcc.n	8006cee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ce8:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <xTaskResumeAll+0x120>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1cb      	bne.n	8006c8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cfc:	f000 fb66 	bl	80073cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d00:	4b1c      	ldr	r3, [pc, #112]	@ (8006d74 <xTaskResumeAll+0x134>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d0c:	f000 f846 	bl	8006d9c <xTaskIncrementTick>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d16:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f1      	bne.n	8006d0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d28:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <xTaskResumeAll+0x134>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <xTaskResumeAll+0x130>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <xTaskResumeAll+0x138>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d4a:	f001 f8ff 	bl	8007f4c <vPortExitCritical>

	return xAlreadyYielded;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	24000e04 	.word	0x24000e04
 8006d5c:	24000ddc 	.word	0x24000ddc
 8006d60:	24000d9c 	.word	0x24000d9c
 8006d64:	24000de4 	.word	0x24000de4
 8006d68:	2400090c 	.word	0x2400090c
 8006d6c:	24000908 	.word	0x24000908
 8006d70:	24000df0 	.word	0x24000df0
 8006d74:	24000dec 	.word	0x24000dec
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d82:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <xTaskGetTickCount+0x1c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d88:	687b      	ldr	r3, [r7, #4]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	24000de0 	.word	0x24000de0

08006d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee4 <xTaskIncrementTick+0x148>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 8090 	bne.w	8006ed0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006db0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ee8 <xTaskIncrementTick+0x14c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ee8 <xTaskIncrementTick+0x14c>)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d121      	bne.n	8006e08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dc4:	4b49      	ldr	r3, [pc, #292]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xTaskIncrementTick+0x46>
 8006de6:	4b41      	ldr	r3, [pc, #260]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	4b40      	ldr	r3, [pc, #256]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a3e      	ldr	r2, [pc, #248]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	f000 fae2 	bl	80073cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e08:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d349      	bcc.n	8006ea6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e12:	4b36      	ldr	r3, [pc, #216]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1c:	4b36      	ldr	r3, [pc, #216]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	601a      	str	r2, [r3, #0]
					break;
 8006e24:	e03f      	b.n	8006ea6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e26:	4b31      	ldr	r3, [pc, #196]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d203      	bcs.n	8006e46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e44:	e02f      	b.n	8006ea6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe ff62 	bl	8005d14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe ff59 	bl	8005d14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e66:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d903      	bls.n	8006e76 <xTaskIncrementTick+0xda>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e72:	4a22      	ldr	r2, [pc, #136]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006e84:	441a      	add	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7fe fee4 	bl	8005c5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e96:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3b8      	bcc.n	8006e12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea4:	e7b5      	b.n	8006e12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ea6:	4b17      	ldr	r3, [pc, #92]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eac:	4914      	ldr	r1, [pc, #80]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d901      	bls.n	8006ec2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ec2:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <xTaskIncrementTick+0x16c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e004      	b.n	8006eda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006ed8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006eda:	697b      	ldr	r3, [r7, #20]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	24000e04 	.word	0x24000e04
 8006ee8:	24000de0 	.word	0x24000de0
 8006eec:	24000d94 	.word	0x24000d94
 8006ef0:	24000d98 	.word	0x24000d98
 8006ef4:	24000df4 	.word	0x24000df4
 8006ef8:	24000dfc 	.word	0x24000dfc
 8006efc:	24000de4 	.word	0x24000de4
 8006f00:	2400090c 	.word	0x2400090c
 8006f04:	24000908 	.word	0x24000908
 8006f08:	24000df0 	.word	0x24000df0
 8006f0c:	24000dec 	.word	0x24000dec

08006f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f16:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc4 <vTaskSwitchContext+0xb4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006fc8 <vTaskSwitchContext+0xb8>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f24:	e047      	b.n	8006fb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006f26:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <vTaskSwitchContext+0xb8>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2c:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <vTaskSwitchContext+0xbc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e011      	b.n	8006f58 <vTaskSwitchContext+0x48>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <vTaskSwitchContext+0x42>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	607b      	str	r3, [r7, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <vTaskSwitchContext+0x3e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	491d      	ldr	r1, [pc, #116]	@ (8006fd0 <vTaskSwitchContext+0xc0>)
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0e3      	beq.n	8006f34 <vTaskSwitchContext+0x24>
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <vTaskSwitchContext+0xc0>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d104      	bne.n	8006f9c <vTaskSwitchContext+0x8c>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd4 <vTaskSwitchContext+0xc4>)
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	4a09      	ldr	r2, [pc, #36]	@ (8006fcc <vTaskSwitchContext+0xbc>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fac:	4b09      	ldr	r3, [pc, #36]	@ (8006fd4 <vTaskSwitchContext+0xc4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3354      	adds	r3, #84	@ 0x54
 8006fb2:	4a09      	ldr	r2, [pc, #36]	@ (8006fd8 <vTaskSwitchContext+0xc8>)
 8006fb4:	6013      	str	r3, [r2, #0]
}
 8006fb6:	bf00      	nop
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	24000e04 	.word	0x24000e04
 8006fc8:	24000df0 	.word	0x24000df0
 8006fcc:	24000de4 	.word	0x24000de4
 8006fd0:	2400090c 	.word	0x2400090c
 8006fd4:	24000908 	.word	0x24000908
 8006fd8:	24000014 	.word	0x24000014

08006fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60fb      	str	r3, [r7, #12]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007004:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <vTaskPlaceOnEventList+0x48>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3318      	adds	r3, #24
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fe fe48 	bl	8005ca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007012:	2101      	movs	r1, #1
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f000 fa87 	bl	8007528 <prvAddCurrentTaskToDelayedList>
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	24000908 	.word	0x24000908

08007028 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	617b      	str	r3, [r7, #20]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007052:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <vTaskPlaceOnEventListRestricted+0x54>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3318      	adds	r3, #24
 8007058:	4619      	mov	r1, r3
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7fe fdfd 	bl	8005c5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	68b8      	ldr	r0, [r7, #8]
 8007070:	f000 fa5a 	bl	8007528 <prvAddCurrentTaskToDelayedList>
	}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	24000908 	.word	0x24000908

08007080 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	60fb      	str	r3, [r7, #12]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3318      	adds	r3, #24
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fe2e 	bl	8005d14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007130 <xTaskRemoveFromEventList+0xb0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d11d      	bne.n	80070fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fe25 	bl	8005d14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ce:	4b19      	ldr	r3, [pc, #100]	@ (8007134 <xTaskRemoveFromEventList+0xb4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d903      	bls.n	80070de <xTaskRemoveFromEventList+0x5e>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	4a16      	ldr	r2, [pc, #88]	@ (8007134 <xTaskRemoveFromEventList+0xb4>)
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a13      	ldr	r2, [pc, #76]	@ (8007138 <xTaskRemoveFromEventList+0xb8>)
 80070ec:	441a      	add	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fe fdb0 	bl	8005c5a <vListInsertEnd>
 80070fa:	e005      	b.n	8007108 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3318      	adds	r3, #24
 8007100:	4619      	mov	r1, r3
 8007102:	480e      	ldr	r0, [pc, #56]	@ (800713c <xTaskRemoveFromEventList+0xbc>)
 8007104:	f7fe fda9 	bl	8005c5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710c:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <xTaskRemoveFromEventList+0xc0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	429a      	cmp	r2, r3
 8007114:	d905      	bls.n	8007122 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800711a:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <xTaskRemoveFromEventList+0xc4>)
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e001      	b.n	8007126 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007126:	697b      	ldr	r3, [r7, #20]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	24000e04 	.word	0x24000e04
 8007134:	24000de4 	.word	0x24000de4
 8007138:	2400090c 	.word	0x2400090c
 800713c:	24000d9c 	.word	0x24000d9c
 8007140:	24000908 	.word	0x24000908
 8007144:	24000df0 	.word	0x24000df0

08007148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007150:	4b06      	ldr	r3, [pc, #24]	@ (800716c <vTaskInternalSetTimeOutState+0x24>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007158:	4b05      	ldr	r3, [pc, #20]	@ (8007170 <vTaskInternalSetTimeOutState+0x28>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	605a      	str	r2, [r3, #4]
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	24000df4 	.word	0x24000df4
 8007170:	24000de0 	.word	0x24000de0

08007174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	613b      	str	r3, [r7, #16]
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	60fb      	str	r3, [r7, #12]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071ba:	f000 fe95 	bl	8007ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071be:	4b1d      	ldr	r3, [pc, #116]	@ (8007234 <xTaskCheckForTimeOut+0xc0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d102      	bne.n	80071de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	e023      	b.n	8007226 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b15      	ldr	r3, [pc, #84]	@ (8007238 <xTaskCheckForTimeOut+0xc4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d007      	beq.n	80071fa <xTaskCheckForTimeOut+0x86>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e015      	b.n	8007226 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d20b      	bcs.n	800721c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff99 	bl	8007148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	e004      	b.n	8007226 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007226:	f000 fe91 	bl	8007f4c <vPortExitCritical>

	return xReturn;
 800722a:	69fb      	ldr	r3, [r7, #28]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	24000de0 	.word	0x24000de0
 8007238:	24000df4 	.word	0x24000df4

0800723c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007240:	4b03      	ldr	r3, [pc, #12]	@ (8007250 <vTaskMissedYield+0x14>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	24000df0 	.word	0x24000df0

08007254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800725c:	f000 f852 	bl	8007304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007260:	4b06      	ldr	r3, [pc, #24]	@ (800727c <prvIdleTask+0x28>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d9f9      	bls.n	800725c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007268:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <prvIdleTask+0x2c>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007278:	e7f0      	b.n	800725c <prvIdleTask+0x8>
 800727a:	bf00      	nop
 800727c:	2400090c 	.word	0x2400090c
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e00c      	b.n	80072aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a12      	ldr	r2, [pc, #72]	@ (80072e4 <prvInitialiseTaskLists+0x60>)
 800729c:	4413      	add	r3, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fcae 	bl	8005c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b37      	cmp	r3, #55	@ 0x37
 80072ae:	d9ef      	bls.n	8007290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072b0:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <prvInitialiseTaskLists+0x64>)
 80072b2:	f7fe fca5 	bl	8005c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072b6:	480d      	ldr	r0, [pc, #52]	@ (80072ec <prvInitialiseTaskLists+0x68>)
 80072b8:	f7fe fca2 	bl	8005c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072bc:	480c      	ldr	r0, [pc, #48]	@ (80072f0 <prvInitialiseTaskLists+0x6c>)
 80072be:	f7fe fc9f 	bl	8005c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072c2:	480c      	ldr	r0, [pc, #48]	@ (80072f4 <prvInitialiseTaskLists+0x70>)
 80072c4:	f7fe fc9c 	bl	8005c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072c8:	480b      	ldr	r0, [pc, #44]	@ (80072f8 <prvInitialiseTaskLists+0x74>)
 80072ca:	f7fe fc99 	bl	8005c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <prvInitialiseTaskLists+0x78>)
 80072d0:	4a05      	ldr	r2, [pc, #20]	@ (80072e8 <prvInitialiseTaskLists+0x64>)
 80072d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <prvInitialiseTaskLists+0x7c>)
 80072d6:	4a05      	ldr	r2, [pc, #20]	@ (80072ec <prvInitialiseTaskLists+0x68>)
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	2400090c 	.word	0x2400090c
 80072e8:	24000d6c 	.word	0x24000d6c
 80072ec:	24000d80 	.word	0x24000d80
 80072f0:	24000d9c 	.word	0x24000d9c
 80072f4:	24000db0 	.word	0x24000db0
 80072f8:	24000dc8 	.word	0x24000dc8
 80072fc:	24000d94 	.word	0x24000d94
 8007300:	24000d98 	.word	0x24000d98

08007304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730a:	e019      	b.n	8007340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800730c:	f000 fdec 	bl	8007ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <prvCheckTasksWaitingTermination+0x50>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fcf9 	bl	8005d14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007322:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <prvCheckTasksWaitingTermination+0x54>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3b01      	subs	r3, #1
 8007328:	4a0b      	ldr	r2, [pc, #44]	@ (8007358 <prvCheckTasksWaitingTermination+0x54>)
 800732a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3b01      	subs	r3, #1
 8007332:	4a0a      	ldr	r2, [pc, #40]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007336:	f000 fe09 	bl	8007f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f810 	bl	8007360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e1      	bne.n	800730c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	24000db0 	.word	0x24000db0
 8007358:	24000ddc 	.word	0x24000ddc
 800735c:	24000dc4 	.word	0x24000dc4

08007360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3354      	adds	r3, #84	@ 0x54
 800736c:	4618      	mov	r0, r3
 800736e:	f001 f8df 	bl	8008530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007378:	2b00      	cmp	r3, #0
 800737a:	d108      	bne.n	800738e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007380:	4618      	mov	r0, r3
 8007382:	f000 ffa1 	bl	80082c8 <vPortFree>
				vPortFree( pxTCB );
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 ff9e 	bl	80082c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800738c:	e019      	b.n	80073c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007394:	2b01      	cmp	r3, #1
 8007396:	d103      	bne.n	80073a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 ff95 	bl	80082c8 <vPortFree>
	}
 800739e:	e010      	b.n	80073c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d00b      	beq.n	80073c2 <prvDeleteTCB+0x62>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	60fb      	str	r3, [r7, #12]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <prvDeleteTCB+0x5e>
	}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007404 <prvResetNextTaskUnblockTime+0x38>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <prvResetNextTaskUnblockTime+0x3c>)
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073e4:	e008      	b.n	80073f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	4b07      	ldr	r3, [pc, #28]	@ (8007404 <prvResetNextTaskUnblockTime+0x38>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4a04      	ldr	r2, [pc, #16]	@ (8007408 <prvResetNextTaskUnblockTime+0x3c>)
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	24000d94 	.word	0x24000d94
 8007408:	24000dfc 	.word	0x24000dfc

0800740c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007412:	4b0b      	ldr	r3, [pc, #44]	@ (8007440 <xTaskGetSchedulerState+0x34>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800741a:	2301      	movs	r3, #1
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	e008      	b.n	8007432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007420:	4b08      	ldr	r3, [pc, #32]	@ (8007444 <xTaskGetSchedulerState+0x38>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007428:	2302      	movs	r3, #2
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	e001      	b.n	8007432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007432:	687b      	ldr	r3, [r7, #4]
	}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	24000de8 	.word	0x24000de8
 8007444:	24000e04 	.word	0x24000e04

08007448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d058      	beq.n	8007510 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800745e:	4b2f      	ldr	r3, [pc, #188]	@ (800751c <xTaskPriorityDisinherit+0xd4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d00b      	beq.n	8007480 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60bb      	str	r3, [r7, #8]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a4:	1e5a      	subs	r2, r3, #1
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d02c      	beq.n	8007510 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d128      	bne.n	8007510 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fc26 	bl	8005d14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <xTaskPriorityDisinherit+0xd8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d903      	bls.n	80074f0 <xTaskPriorityDisinherit+0xa8>
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007520 <xTaskPriorityDisinherit+0xd8>)
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4a09      	ldr	r2, [pc, #36]	@ (8007524 <xTaskPriorityDisinherit+0xdc>)
 80074fe:	441a      	add	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3304      	adds	r3, #4
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f7fe fba7 	bl	8005c5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800750c:	2301      	movs	r3, #1
 800750e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007510:	697b      	ldr	r3, [r7, #20]
	}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	24000908 	.word	0x24000908
 8007520:	24000de4 	.word	0x24000de4
 8007524:	2400090c 	.word	0x2400090c

08007528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007532:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007538:	4b20      	ldr	r3, [pc, #128]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fbe8 	bl	8005d14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d10a      	bne.n	8007562 <prvAddCurrentTaskToDelayedList+0x3a>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007552:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4819      	ldr	r0, [pc, #100]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800755c:	f7fe fb7d 	bl	8005c5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007560:	e026      	b.n	80075b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800756a:	4b14      	ldr	r3, [pc, #80]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	429a      	cmp	r2, r3
 8007578:	d209      	bcs.n	800758e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800757a:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4b0f      	ldr	r3, [pc, #60]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f7fe fb8b 	bl	8005ca2 <vListInsert>
}
 800758c:	e010      	b.n	80075b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800758e:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fe fb81 	bl	8005ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075a0:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d202      	bcs.n	80075b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075aa:	4a08      	ldr	r2, [pc, #32]	@ (80075cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6013      	str	r3, [r2, #0]
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	24000de0 	.word	0x24000de0
 80075bc:	24000908 	.word	0x24000908
 80075c0:	24000dc8 	.word	0x24000dc8
 80075c4:	24000d98 	.word	0x24000d98
 80075c8:	24000d94 	.word	0x24000d94
 80075cc:	24000dfc 	.word	0x24000dfc

080075d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	@ 0x28
 80075d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075da:	f000 fb13 	bl	8007c04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075de:	4b1d      	ldr	r3, [pc, #116]	@ (8007654 <xTimerCreateTimerTask+0x84>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d021      	beq.n	800762a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075ee:	1d3a      	adds	r2, r7, #4
 80075f0:	f107 0108 	add.w	r1, r7, #8
 80075f4:	f107 030c 	add.w	r3, r7, #12
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fae7 	bl	8005bcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	9202      	str	r2, [sp, #8]
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	2302      	movs	r3, #2
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	460a      	mov	r2, r1
 8007610:	4911      	ldr	r1, [pc, #68]	@ (8007658 <xTimerCreateTimerTask+0x88>)
 8007612:	4812      	ldr	r0, [pc, #72]	@ (800765c <xTimerCreateTimerTask+0x8c>)
 8007614:	f7ff f8a2 	bl	800675c <xTaskCreateStatic>
 8007618:	4603      	mov	r3, r0
 800761a:	4a11      	ldr	r2, [pc, #68]	@ (8007660 <xTimerCreateTimerTask+0x90>)
 800761c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800761e:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <xTimerCreateTimerTask+0x90>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007626:	2301      	movs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10b      	bne.n	8007648 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	613b      	str	r3, [r7, #16]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007648:	697b      	ldr	r3, [r7, #20]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	24000e38 	.word	0x24000e38
 8007658:	080086fc 	.word	0x080086fc
 800765c:	0800779d 	.word	0x0800779d
 8007660:	24000e3c 	.word	0x24000e3c

08007664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	@ 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007672:	2300      	movs	r3, #0
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <xTimerGenericCommand+0x30>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	623b      	str	r3, [r7, #32]
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007694:	4b19      	ldr	r3, [pc, #100]	@ (80076fc <xTimerGenericCommand+0x98>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d02a      	beq.n	80076f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	dc18      	bgt.n	80076e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076ae:	f7ff fead 	bl	800740c <xTaskGetSchedulerState>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d109      	bne.n	80076cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076b8:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <xTimerGenericCommand+0x98>)
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	f107 0110 	add.w	r1, r7, #16
 80076c0:	2300      	movs	r3, #0
 80076c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c4:	f7fe fc5a 	bl	8005f7c <xQueueGenericSend>
 80076c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80076ca:	e012      	b.n	80076f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076cc:	4b0b      	ldr	r3, [pc, #44]	@ (80076fc <xTimerGenericCommand+0x98>)
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	f107 0110 	add.w	r1, r7, #16
 80076d4:	2300      	movs	r3, #0
 80076d6:	2200      	movs	r2, #0
 80076d8:	f7fe fc50 	bl	8005f7c <xQueueGenericSend>
 80076dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80076de:	e008      	b.n	80076f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076e0:	4b06      	ldr	r3, [pc, #24]	@ (80076fc <xTimerGenericCommand+0x98>)
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	f107 0110 	add.w	r1, r7, #16
 80076e8:	2300      	movs	r3, #0
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	f7fe fd48 	bl	8006180 <xQueueGenericSendFromISR>
 80076f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3728      	adds	r7, #40	@ 0x28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	24000e38 	.word	0x24000e38

08007700 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af02      	add	r7, sp, #8
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770a:	4b23      	ldr	r3, [pc, #140]	@ (8007798 <prvProcessExpiredTimer+0x98>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	3304      	adds	r3, #4
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fafb 	bl	8005d14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d023      	beq.n	8007774 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	18d1      	adds	r1, r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f000 f8d5 	bl	80078e8 <prvInsertTimerInActiveList>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007744:	2300      	movs	r3, #0
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	2300      	movs	r3, #0
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	2100      	movs	r1, #0
 800774e:	6978      	ldr	r0, [r7, #20]
 8007750:	f7ff ff88 	bl	8007664 <xTimerGenericCommand>
 8007754:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d114      	bne.n	8007786 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	6978      	ldr	r0, [r7, #20]
 800778c:	4798      	blx	r3
}
 800778e:	bf00      	nop
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	24000e30 	.word	0x24000e30

0800779c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f859 	bl	8007860 <prvGetNextExpireTime>
 80077ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4619      	mov	r1, r3
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f805 	bl	80077c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077ba:	f000 f8d7 	bl	800796c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077be:	bf00      	nop
 80077c0:	e7f0      	b.n	80077a4 <prvTimerTask+0x8>
	...

080077c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077ce:	f7ff fa29 	bl	8006c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077d2:	f107 0308 	add.w	r3, r7, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f866 	bl	80078a8 <prvSampleTimeNow>
 80077dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d130      	bne.n	8007846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <prvProcessTimerOrBlockTask+0x3c>
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d806      	bhi.n	8007800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077f2:	f7ff fa25 	bl	8006c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff81 	bl	8007700 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077fe:	e024      	b.n	800784a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d008      	beq.n	8007818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007806:	4b13      	ldr	r3, [pc, #76]	@ (8007854 <prvProcessTimerOrBlockTask+0x90>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <prvProcessTimerOrBlockTask+0x50>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <prvProcessTimerOrBlockTask+0x52>
 8007814:	2300      	movs	r3, #0
 8007816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007818:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <prvProcessTimerOrBlockTask+0x94>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	4619      	mov	r1, r3
 8007826:	f7fe ff65 	bl	80066f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800782a:	f7ff fa09 	bl	8006c40 <xTaskResumeAll>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007834:	4b09      	ldr	r3, [pc, #36]	@ (800785c <prvProcessTimerOrBlockTask+0x98>)
 8007836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	f3bf 8f6f 	isb	sy
}
 8007844:	e001      	b.n	800784a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007846:	f7ff f9fb 	bl	8006c40 <xTaskResumeAll>
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	24000e34 	.word	0x24000e34
 8007858:	24000e38 	.word	0x24000e38
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <prvGetNextExpireTime+0x44>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <prvGetNextExpireTime+0x16>
 8007872:	2201      	movs	r2, #1
 8007874:	e000      	b.n	8007878 <prvGetNextExpireTime+0x18>
 8007876:	2200      	movs	r2, #0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007884:	4b07      	ldr	r3, [pc, #28]	@ (80078a4 <prvGetNextExpireTime+0x44>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e001      	b.n	8007894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007894:	68fb      	ldr	r3, [r7, #12]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	24000e30 	.word	0x24000e30

080078a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078b0:	f7ff fa64 	bl	8006d7c <xTaskGetTickCount>
 80078b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078b6:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <prvSampleTimeNow+0x3c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d205      	bcs.n	80078cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078c0:	f000 f93a 	bl	8007b38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e002      	b.n	80078d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078d2:	4a04      	ldr	r2, [pc, #16]	@ (80078e4 <prvSampleTimeNow+0x3c>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078d8:	68fb      	ldr	r3, [r7, #12]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	24000e40 	.word	0x24000e40

080078e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	429a      	cmp	r2, r3
 800790c:	d812      	bhi.n	8007934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	429a      	cmp	r2, r3
 800791a:	d302      	bcc.n	8007922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e01b      	b.n	800795a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007922:	4b10      	ldr	r3, [pc, #64]	@ (8007964 <prvInsertTimerInActiveList+0x7c>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3304      	adds	r3, #4
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7fe f9b8 	bl	8005ca2 <vListInsert>
 8007932:	e012      	b.n	800795a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d206      	bcs.n	800794a <prvInsertTimerInActiveList+0x62>
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d302      	bcc.n	800794a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007944:	2301      	movs	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e007      	b.n	800795a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800794a:	4b07      	ldr	r3, [pc, #28]	@ (8007968 <prvInsertTimerInActiveList+0x80>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7fe f9a4 	bl	8005ca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800795a:	697b      	ldr	r3, [r7, #20]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	24000e34 	.word	0x24000e34
 8007968:	24000e30 	.word	0x24000e30

0800796c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08e      	sub	sp, #56	@ 0x38
 8007970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007972:	e0ce      	b.n	8007b12 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	da19      	bge.n	80079ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800797a:	1d3b      	adds	r3, r7, #4
 800797c:	3304      	adds	r3, #4
 800797e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	61fb      	str	r3, [r7, #28]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800799e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a4:	6850      	ldr	r0, [r2, #4]
 80079a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a8:	6892      	ldr	r2, [r2, #8]
 80079aa:	4611      	mov	r1, r2
 80079ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f2c0 80ae 	blt.w	8007b12 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c4:	3304      	adds	r3, #4
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe f9a4 	bl	8005d14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079cc:	463b      	mov	r3, r7
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff ff6a 	bl	80078a8 <prvSampleTimeNow>
 80079d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b09      	cmp	r3, #9
 80079da:	f200 8097 	bhi.w	8007b0c <prvProcessReceivedCommands+0x1a0>
 80079de:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <prvProcessReceivedCommands+0x78>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a83 	.word	0x08007a83
 80079f4:	08007a97 	.word	0x08007a97
 80079f8:	08007ae3 	.word	0x08007ae3
 80079fc:	08007a0d 	.word	0x08007a0d
 8007a00:	08007a0d 	.word	0x08007a0d
 8007a04:	08007a83 	.word	0x08007a83
 8007a08:	08007a97 	.word	0x08007a97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	18d1      	adds	r1, r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a2c:	f7ff ff5c 	bl	80078e8 <prvInsertTimerInActiveList>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d06c      	beq.n	8007b10 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d061      	beq.n	8007b10 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	441a      	add	r2, r3
 8007a54:	2300      	movs	r3, #0
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a5e:	f7ff fe01 	bl	8007664 <xTimerGenericCommand>
 8007a62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d152      	bne.n	8007b10 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	61bb      	str	r3, [r7, #24]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a94:	e03d      	b.n	8007b12 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	617b      	str	r3, [r7, #20]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	18d1      	adds	r1, r2, r3
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007adc:	f7ff ff04 	bl	80078e8 <prvInsertTimerInActiveList>
					break;
 8007ae0:	e017      	b.n	8007b12 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007af2:	f000 fbe9 	bl	80082c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007af6:	e00c      	b.n	8007b12 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b0a:	e002      	b.n	8007b12 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <prvProcessReceivedCommands+0x1a6>
					break;
 8007b10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b12:	4b08      	ldr	r3, [pc, #32]	@ (8007b34 <prvProcessReceivedCommands+0x1c8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	1d39      	adds	r1, r7, #4
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fbce 	bl	80062bc <xQueueReceive>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f47f af26 	bne.w	8007974 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	3730      	adds	r7, #48	@ 0x30
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	24000e38 	.word	0x24000e38

08007b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b3e:	e049      	b.n	8007bd4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b40:	4b2e      	ldr	r3, [pc, #184]	@ (8007bfc <prvSwitchTimerLists+0xc4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007bfc <prvSwitchTimerLists+0xc4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe f8db 	bl	8005d14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d02f      	beq.n	8007bd4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d90e      	bls.n	8007ba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b92:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <prvSwitchTimerLists+0xc4>)
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f7fe f880 	bl	8005ca2 <vListInsert>
 8007ba2:	e017      	b.n	8007bd4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	2100      	movs	r1, #0
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fd58 	bl	8007664 <xTimerGenericCommand>
 8007bb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	603b      	str	r3, [r7, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bd4:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <prvSwitchTimerLists+0xc4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1b0      	bne.n	8007b40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bde:	4b07      	ldr	r3, [pc, #28]	@ (8007bfc <prvSwitchTimerLists+0xc4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <prvSwitchTimerLists+0xc8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a04      	ldr	r2, [pc, #16]	@ (8007bfc <prvSwitchTimerLists+0xc4>)
 8007bea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bec:	4a04      	ldr	r2, [pc, #16]	@ (8007c00 <prvSwitchTimerLists+0xc8>)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6013      	str	r3, [r2, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	24000e30 	.word	0x24000e30
 8007c00:	24000e34 	.word	0x24000e34

08007c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c0a:	f000 f96d 	bl	8007ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c0e:	4b15      	ldr	r3, [pc, #84]	@ (8007c64 <prvCheckForValidListAndQueue+0x60>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d120      	bne.n	8007c58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c16:	4814      	ldr	r0, [pc, #80]	@ (8007c68 <prvCheckForValidListAndQueue+0x64>)
 8007c18:	f7fd fff2 	bl	8005c00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c1c:	4813      	ldr	r0, [pc, #76]	@ (8007c6c <prvCheckForValidListAndQueue+0x68>)
 8007c1e:	f7fd ffef 	bl	8005c00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c22:	4b13      	ldr	r3, [pc, #76]	@ (8007c70 <prvCheckForValidListAndQueue+0x6c>)
 8007c24:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <prvCheckForValidListAndQueue+0x64>)
 8007c26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c28:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <prvCheckForValidListAndQueue+0x70>)
 8007c2a:	4a10      	ldr	r2, [pc, #64]	@ (8007c6c <prvCheckForValidListAndQueue+0x68>)
 8007c2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4b11      	ldr	r3, [pc, #68]	@ (8007c78 <prvCheckForValidListAndQueue+0x74>)
 8007c34:	4a11      	ldr	r2, [pc, #68]	@ (8007c7c <prvCheckForValidListAndQueue+0x78>)
 8007c36:	2110      	movs	r1, #16
 8007c38:	200a      	movs	r0, #10
 8007c3a:	f7fe f8ff 	bl	8005e3c <xQueueGenericCreateStatic>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4a08      	ldr	r2, [pc, #32]	@ (8007c64 <prvCheckForValidListAndQueue+0x60>)
 8007c42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c44:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <prvCheckForValidListAndQueue+0x60>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c4c:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <prvCheckForValidListAndQueue+0x60>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	490b      	ldr	r1, [pc, #44]	@ (8007c80 <prvCheckForValidListAndQueue+0x7c>)
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fd24 	bl	80066a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c58:	f000 f978 	bl	8007f4c <vPortExitCritical>
}
 8007c5c:	bf00      	nop
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	24000e38 	.word	0x24000e38
 8007c68:	24000e08 	.word	0x24000e08
 8007c6c:	24000e1c 	.word	0x24000e1c
 8007c70:	24000e30 	.word	0x24000e30
 8007c74:	24000e34 	.word	0x24000e34
 8007c78:	24000ee4 	.word	0x24000ee4
 8007c7c:	24000e44 	.word	0x24000e44
 8007c80:	08008704 	.word	0x08008704

08007c84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3b04      	subs	r3, #4
 8007c94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f023 0201 	bic.w	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3b04      	subs	r3, #4
 8007cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce8 <pxPortInitialiseStack+0x64>)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3b14      	subs	r3, #20
 8007cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3b04      	subs	r3, #4
 8007cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f06f 0202 	mvn.w	r2, #2
 8007cd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3b20      	subs	r3, #32
 8007cd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cda:	68fb      	ldr	r3, [r7, #12]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	08007ced 	.word	0x08007ced

08007cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cf6:	4b13      	ldr	r3, [pc, #76]	@ (8007d44 <prvTaskExitError+0x58>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d00b      	beq.n	8007d18 <prvTaskExitError+0x2c>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <prvTaskExitError+0x28>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	60bb      	str	r3, [r7, #8]
}
 8007d2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d2c:	bf00      	nop
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0fc      	beq.n	8007d2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	24000010 	.word	0x24000010
	...

08007d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d50:	4b07      	ldr	r3, [pc, #28]	@ (8007d70 <pxCurrentTCBConst2>)
 8007d52:	6819      	ldr	r1, [r3, #0]
 8007d54:	6808      	ldr	r0, [r1, #0]
 8007d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	f380 8809 	msr	PSP, r0
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8811 	msr	BASEPRI, r0
 8007d6a:	4770      	bx	lr
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst2>:
 8007d70:	24000908 	.word	0x24000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop

08007d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d78:	4808      	ldr	r0, [pc, #32]	@ (8007d9c <prvPortStartFirstTask+0x24>)
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	6800      	ldr	r0, [r0, #0]
 8007d7e:	f380 8808 	msr	MSP, r0
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f380 8814 	msr	CONTROL, r0
 8007d8a:	b662      	cpsie	i
 8007d8c:	b661      	cpsie	f
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	df00      	svc	0
 8007d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d9a:	bf00      	nop
 8007d9c:	e000ed08 	.word	0xe000ed08

08007da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007da6:	4b47      	ldr	r3, [pc, #284]	@ (8007ec4 <xPortStartScheduler+0x124>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a47      	ldr	r2, [pc, #284]	@ (8007ec8 <xPortStartScheduler+0x128>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d10b      	bne.n	8007dc8 <xPortStartScheduler+0x28>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ec4 <xPortStartScheduler+0x124>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ecc <xPortStartScheduler+0x12c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d10b      	bne.n	8007dea <xPortStartScheduler+0x4a>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60fb      	str	r3, [r7, #12]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dea:	4b39      	ldr	r3, [pc, #228]	@ (8007ed0 <xPortStartScheduler+0x130>)
 8007dec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	22ff      	movs	r2, #255	@ 0xff
 8007dfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ed4 <xPortStartScheduler+0x134>)
 8007e10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e12:	4b31      	ldr	r3, [pc, #196]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e14:	2207      	movs	r2, #7
 8007e16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e18:	e009      	b.n	8007e2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	4a2d      	ldr	r2, [pc, #180]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e36:	2b80      	cmp	r3, #128	@ 0x80
 8007e38:	d0ef      	beq.n	8007e1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e3a:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f1c3 0307 	rsb	r3, r3, #7
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d00b      	beq.n	8007e5e <xPortStartScheduler+0xbe>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60bb      	str	r3, [r7, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e68:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e70:	4a19      	ldr	r2, [pc, #100]	@ (8007ed8 <xPortStartScheduler+0x138>)
 8007e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e7c:	4b17      	ldr	r3, [pc, #92]	@ (8007edc <xPortStartScheduler+0x13c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a16      	ldr	r2, [pc, #88]	@ (8007edc <xPortStartScheduler+0x13c>)
 8007e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e88:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <xPortStartScheduler+0x13c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a13      	ldr	r2, [pc, #76]	@ (8007edc <xPortStartScheduler+0x13c>)
 8007e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e94:	f000 f8da 	bl	800804c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e98:	4b11      	ldr	r3, [pc, #68]	@ (8007ee0 <xPortStartScheduler+0x140>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e9e:	f000 f8f9 	bl	8008094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ea2:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <xPortStartScheduler+0x144>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ee4 <xPortStartScheduler+0x144>)
 8007ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007eae:	f7ff ff63 	bl	8007d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eb2:	f7ff f82d 	bl	8006f10 <vTaskSwitchContext>
	prvTaskExitError();
 8007eb6:	f7ff ff19 	bl	8007cec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed00 	.word	0xe000ed00
 8007ec8:	410fc271 	.word	0x410fc271
 8007ecc:	410fc270 	.word	0x410fc270
 8007ed0:	e000e400 	.word	0xe000e400
 8007ed4:	24000f34 	.word	0x24000f34
 8007ed8:	24000f38 	.word	0x24000f38
 8007edc:	e000ed20 	.word	0xe000ed20
 8007ee0:	24000010 	.word	0x24000010
 8007ee4:	e000ef34 	.word	0xe000ef34

08007ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f02:	4b10      	ldr	r3, [pc, #64]	@ (8007f44 <vPortEnterCritical+0x5c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	4a0e      	ldr	r2, [pc, #56]	@ (8007f44 <vPortEnterCritical+0x5c>)
 8007f0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f44 <vPortEnterCritical+0x5c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d110      	bne.n	8007f36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f14:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <vPortEnterCritical+0x60>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <vPortEnterCritical+0x4e>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	603b      	str	r3, [r7, #0]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <vPortEnterCritical+0x4a>
	}
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	24000010 	.word	0x24000010
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f52:	4b12      	ldr	r3, [pc, #72]	@ (8007f9c <vPortExitCritical+0x50>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <vPortExitCritical+0x26>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	607b      	str	r3, [r7, #4]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f72:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <vPortExitCritical+0x50>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	4a08      	ldr	r2, [pc, #32]	@ (8007f9c <vPortExitCritical+0x50>)
 8007f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f7c:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <vPortExitCritical+0x50>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d105      	bne.n	8007f90 <vPortExitCritical+0x44>
 8007f84:	2300      	movs	r3, #0
 8007f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
}
 8007f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	24000010 	.word	0x24000010

08007fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fa0:	f3ef 8009 	mrs	r0, PSP
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4b15      	ldr	r3, [pc, #84]	@ (8008000 <pxCurrentTCBConst>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	f01e 0f10 	tst.w	lr, #16
 8007fb0:	bf08      	it	eq
 8007fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	6010      	str	r0, [r2, #0]
 8007fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007fc4:	f380 8811 	msr	BASEPRI, r0
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f7fe ff9e 	bl	8006f10 <vTaskSwitchContext>
 8007fd4:	f04f 0000 	mov.w	r0, #0
 8007fd8:	f380 8811 	msr	BASEPRI, r0
 8007fdc:	bc09      	pop	{r0, r3}
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	6808      	ldr	r0, [r1, #0]
 8007fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe6:	f01e 0f10 	tst.w	lr, #16
 8007fea:	bf08      	it	eq
 8007fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ff0:	f380 8809 	msr	PSP, r0
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w

08008000 <pxCurrentTCBConst>:
 8008000:	24000908 	.word	0x24000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008022:	f7fe febb 	bl	8006d9c <xTaskIncrementTick>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800802c:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <xPortSysTickHandler+0x40>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f383 8811 	msr	BASEPRI, r3
}
 800803e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008050:	4b0b      	ldr	r3, [pc, #44]	@ (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <vPortSetupTimerInterrupt+0x38>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <vPortSetupTimerInterrupt+0x3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0a      	ldr	r2, [pc, #40]	@ (800808c <vPortSetupTimerInterrupt+0x40>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4a09      	ldr	r2, [pc, #36]	@ (8008090 <vPortSetupTimerInterrupt+0x44>)
 800806a:	3b01      	subs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800806e:	4b04      	ldr	r3, [pc, #16]	@ (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	e000e010 	.word	0xe000e010
 8008084:	e000e018 	.word	0xe000e018
 8008088:	24000000 	.word	0x24000000
 800808c:	10624dd3 	.word	0x10624dd3
 8008090:	e000e014 	.word	0xe000e014

08008094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80080a4 <vPortEnableVFP+0x10>
 8008098:	6801      	ldr	r1, [r0, #0]
 800809a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800809e:	6001      	str	r1, [r0, #0]
 80080a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080a2:	bf00      	nop
 80080a4:	e000ed88 	.word	0xe000ed88

080080a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ae:	f3ef 8305 	mrs	r3, IPSR
 80080b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b0f      	cmp	r3, #15
 80080b8:	d915      	bls.n	80080e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ba:	4a18      	ldr	r2, [pc, #96]	@ (800811c <vPortValidateInterruptPriority+0x74>)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080c4:	4b16      	ldr	r3, [pc, #88]	@ (8008120 <vPortValidateInterruptPriority+0x78>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	7afa      	ldrb	r2, [r7, #11]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20b      	bcs.n	80080e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	e7fd      	b.n	80080e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <vPortValidateInterruptPriority+0x7c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008128 <vPortValidateInterruptPriority+0x80>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d90b      	bls.n	800810e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	603b      	str	r3, [r7, #0]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <vPortValidateInterruptPriority+0x62>
	}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	e000e3f0 	.word	0xe000e3f0
 8008120:	24000f34 	.word	0x24000f34
 8008124:	e000ed0c 	.word	0xe000ed0c
 8008128:	24000f38 	.word	0x24000f38

0800812c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008134:	2300      	movs	r3, #0
 8008136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008138:	f7fe fd74 	bl	8006c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800813c:	4b5c      	ldr	r3, [pc, #368]	@ (80082b0 <pvPortMalloc+0x184>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008144:	f000 f924 	bl	8008390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008148:	4b5a      	ldr	r3, [pc, #360]	@ (80082b4 <pvPortMalloc+0x188>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 8095 	bne.w	8008280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01e      	beq.n	800819a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800815c:	2208      	movs	r2, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b00      	cmp	r3, #0
 800816c:	d015      	beq.n	800819a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f023 0307 	bic.w	r3, r3, #7
 8008174:	3308      	adds	r3, #8
 8008176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <pvPortMalloc+0x6e>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	617b      	str	r3, [r7, #20]
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	e7fd      	b.n	8008196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d06f      	beq.n	8008280 <pvPortMalloc+0x154>
 80081a0:	4b45      	ldr	r3, [pc, #276]	@ (80082b8 <pvPortMalloc+0x18c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d86a      	bhi.n	8008280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081aa:	4b44      	ldr	r3, [pc, #272]	@ (80082bc <pvPortMalloc+0x190>)
 80081ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081ae:	4b43      	ldr	r3, [pc, #268]	@ (80082bc <pvPortMalloc+0x190>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081b4:	e004      	b.n	80081c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d903      	bls.n	80081d2 <pvPortMalloc+0xa6>
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f1      	bne.n	80081b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081d2:	4b37      	ldr	r3, [pc, #220]	@ (80082b0 <pvPortMalloc+0x184>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d8:	429a      	cmp	r2, r3
 80081da:	d051      	beq.n	8008280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2208      	movs	r2, #8
 80081e2:	4413      	add	r3, r2
 80081e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	2308      	movs	r3, #8
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d920      	bls.n	8008240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4413      	add	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <pvPortMalloc+0xfc>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800823a:	69b8      	ldr	r0, [r7, #24]
 800823c:	f000 f90a 	bl	8008454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008240:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <pvPortMalloc+0x18c>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	4a1b      	ldr	r2, [pc, #108]	@ (80082b8 <pvPortMalloc+0x18c>)
 800824c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800824e:	4b1a      	ldr	r3, [pc, #104]	@ (80082b8 <pvPortMalloc+0x18c>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b1b      	ldr	r3, [pc, #108]	@ (80082c0 <pvPortMalloc+0x194>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d203      	bcs.n	8008262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800825a:	4b17      	ldr	r3, [pc, #92]	@ (80082b8 <pvPortMalloc+0x18c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a18      	ldr	r2, [pc, #96]	@ (80082c0 <pvPortMalloc+0x194>)
 8008260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4b13      	ldr	r3, [pc, #76]	@ (80082b4 <pvPortMalloc+0x188>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	431a      	orrs	r2, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008276:	4b13      	ldr	r3, [pc, #76]	@ (80082c4 <pvPortMalloc+0x198>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3301      	adds	r3, #1
 800827c:	4a11      	ldr	r2, [pc, #68]	@ (80082c4 <pvPortMalloc+0x198>)
 800827e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008280:	f7fe fcde 	bl	8006c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <pvPortMalloc+0x17a>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60fb      	str	r3, [r7, #12]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <pvPortMalloc+0x176>
	return pvReturn;
 80082a6:	69fb      	ldr	r3, [r7, #28]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3728      	adds	r7, #40	@ 0x28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	24004b44 	.word	0x24004b44
 80082b4:	24004b58 	.word	0x24004b58
 80082b8:	24004b48 	.word	0x24004b48
 80082bc:	24004b3c 	.word	0x24004b3c
 80082c0:	24004b4c 	.word	0x24004b4c
 80082c4:	24004b50 	.word	0x24004b50

080082c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d04f      	beq.n	800837a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082da:	2308      	movs	r3, #8
 80082dc:	425b      	negs	r3, r3
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4413      	add	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	4b25      	ldr	r3, [pc, #148]	@ (8008384 <vPortFree+0xbc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4013      	ands	r3, r2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <vPortFree+0x46>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60fb      	str	r3, [r7, #12]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <vPortFree+0x66>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	4b14      	ldr	r3, [pc, #80]	@ (8008384 <vPortFree+0xbc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4013      	ands	r3, r2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01e      	beq.n	800837a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d11a      	bne.n	800837a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	4b0e      	ldr	r3, [pc, #56]	@ (8008384 <vPortFree+0xbc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	43db      	mvns	r3, r3
 800834e:	401a      	ands	r2, r3
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008354:	f7fe fc66 	bl	8006c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	4b0a      	ldr	r3, [pc, #40]	@ (8008388 <vPortFree+0xc0>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4413      	add	r3, r2
 8008362:	4a09      	ldr	r2, [pc, #36]	@ (8008388 <vPortFree+0xc0>)
 8008364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008366:	6938      	ldr	r0, [r7, #16]
 8008368:	f000 f874 	bl	8008454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800836c:	4b07      	ldr	r3, [pc, #28]	@ (800838c <vPortFree+0xc4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	4a06      	ldr	r2, [pc, #24]	@ (800838c <vPortFree+0xc4>)
 8008374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008376:	f7fe fc63 	bl	8006c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800837a:	bf00      	nop
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	24004b58 	.word	0x24004b58
 8008388:	24004b48 	.word	0x24004b48
 800838c:	24004b54 	.word	0x24004b54

08008390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008396:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800839a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800839c:	4b27      	ldr	r3, [pc, #156]	@ (800843c <prvHeapInit+0xac>)
 800839e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00c      	beq.n	80083c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3307      	adds	r3, #7
 80083ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0307 	bic.w	r3, r3, #7
 80083b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	4a1f      	ldr	r2, [pc, #124]	@ (800843c <prvHeapInit+0xac>)
 80083c0:	4413      	add	r3, r2
 80083c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008440 <prvHeapInit+0xb0>)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008440 <prvHeapInit+0xb0>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	4413      	add	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083dc:	2208      	movs	r2, #8
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4a15      	ldr	r2, [pc, #84]	@ (8008444 <prvHeapInit+0xb4>)
 80083f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083f2:	4b14      	ldr	r3, [pc, #80]	@ (8008444 <prvHeapInit+0xb4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2200      	movs	r2, #0
 80083f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083fa:	4b12      	ldr	r3, [pc, #72]	@ (8008444 <prvHeapInit+0xb4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008410:	4b0c      	ldr	r3, [pc, #48]	@ (8008444 <prvHeapInit+0xb4>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	4a0a      	ldr	r2, [pc, #40]	@ (8008448 <prvHeapInit+0xb8>)
 800841e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	4a09      	ldr	r2, [pc, #36]	@ (800844c <prvHeapInit+0xbc>)
 8008426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008428:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <prvHeapInit+0xc0>)
 800842a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800842e:	601a      	str	r2, [r3, #0]
}
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	24000f3c 	.word	0x24000f3c
 8008440:	24004b3c 	.word	0x24004b3c
 8008444:	24004b44 	.word	0x24004b44
 8008448:	24004b4c 	.word	0x24004b4c
 800844c:	24004b48 	.word	0x24004b48
 8008450:	24004b58 	.word	0x24004b58

08008454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800845c:	4b28      	ldr	r3, [pc, #160]	@ (8008500 <prvInsertBlockIntoFreeList+0xac>)
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	e002      	b.n	8008468 <prvInsertBlockIntoFreeList+0x14>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	429a      	cmp	r2, r3
 8008470:	d8f7      	bhi.n	8008462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d108      	bne.n	8008496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	441a      	add	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	441a      	add	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d118      	bne.n	80084dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	4b15      	ldr	r3, [pc, #84]	@ (8008504 <prvInsertBlockIntoFreeList+0xb0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d00d      	beq.n	80084d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	441a      	add	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	e008      	b.n	80084e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <prvInsertBlockIntoFreeList+0xb0>)
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e003      	b.n	80084e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d002      	beq.n	80084f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	24004b3c 	.word	0x24004b3c
 8008504:	24004b44 	.word	0x24004b44

08008508 <__malloc_lock>:
 8008508:	4801      	ldr	r0, [pc, #4]	@ (8008510 <__malloc_lock+0x8>)
 800850a:	f7f8 bc42 	b.w	8000d92 <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	24000164 	.word	0x24000164

08008514 <__malloc_unlock>:
 8008514:	4801      	ldr	r0, [pc, #4]	@ (800851c <__malloc_unlock+0x8>)
 8008516:	f7f8 bc51 	b.w	8000dbc <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	24000164 	.word	0x24000164

08008520 <memset>:
 8008520:	4402      	add	r2, r0
 8008522:	4603      	mov	r3, r0
 8008524:	4293      	cmp	r3, r2
 8008526:	d100      	bne.n	800852a <memset+0xa>
 8008528:	4770      	bx	lr
 800852a:	f803 1b01 	strb.w	r1, [r3], #1
 800852e:	e7f9      	b.n	8008524 <memset+0x4>

08008530 <_reclaim_reent>:
 8008530:	4b29      	ldr	r3, [pc, #164]	@ (80085d8 <_reclaim_reent+0xa8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4283      	cmp	r3, r0
 8008536:	b570      	push	{r4, r5, r6, lr}
 8008538:	4604      	mov	r4, r0
 800853a:	d04b      	beq.n	80085d4 <_reclaim_reent+0xa4>
 800853c:	69c3      	ldr	r3, [r0, #28]
 800853e:	b1ab      	cbz	r3, 800856c <_reclaim_reent+0x3c>
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	b16b      	cbz	r3, 8008560 <_reclaim_reent+0x30>
 8008544:	2500      	movs	r5, #0
 8008546:	69e3      	ldr	r3, [r4, #28]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	5959      	ldr	r1, [r3, r5]
 800854c:	2900      	cmp	r1, #0
 800854e:	d13b      	bne.n	80085c8 <_reclaim_reent+0x98>
 8008550:	3504      	adds	r5, #4
 8008552:	2d80      	cmp	r5, #128	@ 0x80
 8008554:	d1f7      	bne.n	8008546 <_reclaim_reent+0x16>
 8008556:	69e3      	ldr	r3, [r4, #28]
 8008558:	4620      	mov	r0, r4
 800855a:	68d9      	ldr	r1, [r3, #12]
 800855c:	f000 f870 	bl	8008640 <_free_r>
 8008560:	69e3      	ldr	r3, [r4, #28]
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	b111      	cbz	r1, 800856c <_reclaim_reent+0x3c>
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f86a 	bl	8008640 <_free_r>
 800856c:	6961      	ldr	r1, [r4, #20]
 800856e:	b111      	cbz	r1, 8008576 <_reclaim_reent+0x46>
 8008570:	4620      	mov	r0, r4
 8008572:	f000 f865 	bl	8008640 <_free_r>
 8008576:	69e1      	ldr	r1, [r4, #28]
 8008578:	b111      	cbz	r1, 8008580 <_reclaim_reent+0x50>
 800857a:	4620      	mov	r0, r4
 800857c:	f000 f860 	bl	8008640 <_free_r>
 8008580:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008582:	b111      	cbz	r1, 800858a <_reclaim_reent+0x5a>
 8008584:	4620      	mov	r0, r4
 8008586:	f000 f85b 	bl	8008640 <_free_r>
 800858a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800858c:	b111      	cbz	r1, 8008594 <_reclaim_reent+0x64>
 800858e:	4620      	mov	r0, r4
 8008590:	f000 f856 	bl	8008640 <_free_r>
 8008594:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008596:	b111      	cbz	r1, 800859e <_reclaim_reent+0x6e>
 8008598:	4620      	mov	r0, r4
 800859a:	f000 f851 	bl	8008640 <_free_r>
 800859e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80085a0:	b111      	cbz	r1, 80085a8 <_reclaim_reent+0x78>
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f84c 	bl	8008640 <_free_r>
 80085a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80085aa:	b111      	cbz	r1, 80085b2 <_reclaim_reent+0x82>
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 f847 	bl	8008640 <_free_r>
 80085b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80085b4:	b111      	cbz	r1, 80085bc <_reclaim_reent+0x8c>
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 f842 	bl	8008640 <_free_r>
 80085bc:	6a23      	ldr	r3, [r4, #32]
 80085be:	b14b      	cbz	r3, 80085d4 <_reclaim_reent+0xa4>
 80085c0:	4620      	mov	r0, r4
 80085c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085c6:	4718      	bx	r3
 80085c8:	680e      	ldr	r6, [r1, #0]
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f838 	bl	8008640 <_free_r>
 80085d0:	4631      	mov	r1, r6
 80085d2:	e7bb      	b.n	800854c <_reclaim_reent+0x1c>
 80085d4:	bd70      	pop	{r4, r5, r6, pc}
 80085d6:	bf00      	nop
 80085d8:	24000014 	.word	0x24000014

080085dc <__libc_init_array>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4d0d      	ldr	r5, [pc, #52]	@ (8008614 <__libc_init_array+0x38>)
 80085e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008618 <__libc_init_array+0x3c>)
 80085e2:	1b64      	subs	r4, r4, r5
 80085e4:	10a4      	asrs	r4, r4, #2
 80085e6:	2600      	movs	r6, #0
 80085e8:	42a6      	cmp	r6, r4
 80085ea:	d109      	bne.n	8008600 <__libc_init_array+0x24>
 80085ec:	4d0b      	ldr	r5, [pc, #44]	@ (800861c <__libc_init_array+0x40>)
 80085ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008620 <__libc_init_array+0x44>)
 80085f0:	f000 f870 	bl	80086d4 <_init>
 80085f4:	1b64      	subs	r4, r4, r5
 80085f6:	10a4      	asrs	r4, r4, #2
 80085f8:	2600      	movs	r6, #0
 80085fa:	42a6      	cmp	r6, r4
 80085fc:	d105      	bne.n	800860a <__libc_init_array+0x2e>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	f855 3b04 	ldr.w	r3, [r5], #4
 8008604:	4798      	blx	r3
 8008606:	3601      	adds	r6, #1
 8008608:	e7ee      	b.n	80085e8 <__libc_init_array+0xc>
 800860a:	f855 3b04 	ldr.w	r3, [r5], #4
 800860e:	4798      	blx	r3
 8008610:	3601      	adds	r6, #1
 8008612:	e7f2      	b.n	80085fa <__libc_init_array+0x1e>
 8008614:	08008770 	.word	0x08008770
 8008618:	08008770 	.word	0x08008770
 800861c:	08008770 	.word	0x08008770
 8008620:	08008774 	.word	0x08008774

08008624 <memcpy>:
 8008624:	440a      	add	r2, r1
 8008626:	4291      	cmp	r1, r2
 8008628:	f100 33ff 	add.w	r3, r0, #4294967295
 800862c:	d100      	bne.n	8008630 <memcpy+0xc>
 800862e:	4770      	bx	lr
 8008630:	b510      	push	{r4, lr}
 8008632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800863a:	4291      	cmp	r1, r2
 800863c:	d1f9      	bne.n	8008632 <memcpy+0xe>
 800863e:	bd10      	pop	{r4, pc}

08008640 <_free_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4605      	mov	r5, r0
 8008644:	2900      	cmp	r1, #0
 8008646:	d041      	beq.n	80086cc <_free_r+0x8c>
 8008648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800864c:	1f0c      	subs	r4, r1, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfb8      	it	lt
 8008652:	18e4      	addlt	r4, r4, r3
 8008654:	f7ff ff58 	bl	8008508 <__malloc_lock>
 8008658:	4a1d      	ldr	r2, [pc, #116]	@ (80086d0 <_free_r+0x90>)
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	b933      	cbnz	r3, 800866c <_free_r+0x2c>
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	6014      	str	r4, [r2, #0]
 8008662:	4628      	mov	r0, r5
 8008664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008668:	f7ff bf54 	b.w	8008514 <__malloc_unlock>
 800866c:	42a3      	cmp	r3, r4
 800866e:	d908      	bls.n	8008682 <_free_r+0x42>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	1821      	adds	r1, r4, r0
 8008674:	428b      	cmp	r3, r1
 8008676:	bf01      	itttt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	1809      	addeq	r1, r1, r0
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	e7ed      	b.n	800865e <_free_r+0x1e>
 8008682:	461a      	mov	r2, r3
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b10b      	cbz	r3, 800868c <_free_r+0x4c>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d9fa      	bls.n	8008682 <_free_r+0x42>
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	1850      	adds	r0, r2, r1
 8008690:	42a0      	cmp	r0, r4
 8008692:	d10b      	bne.n	80086ac <_free_r+0x6c>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	4401      	add	r1, r0
 8008698:	1850      	adds	r0, r2, r1
 800869a:	4283      	cmp	r3, r0
 800869c:	6011      	str	r1, [r2, #0]
 800869e:	d1e0      	bne.n	8008662 <_free_r+0x22>
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	6053      	str	r3, [r2, #4]
 80086a6:	4408      	add	r0, r1
 80086a8:	6010      	str	r0, [r2, #0]
 80086aa:	e7da      	b.n	8008662 <_free_r+0x22>
 80086ac:	d902      	bls.n	80086b4 <_free_r+0x74>
 80086ae:	230c      	movs	r3, #12
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	e7d6      	b.n	8008662 <_free_r+0x22>
 80086b4:	6820      	ldr	r0, [r4, #0]
 80086b6:	1821      	adds	r1, r4, r0
 80086b8:	428b      	cmp	r3, r1
 80086ba:	bf04      	itt	eq
 80086bc:	6819      	ldreq	r1, [r3, #0]
 80086be:	685b      	ldreq	r3, [r3, #4]
 80086c0:	6063      	str	r3, [r4, #4]
 80086c2:	bf04      	itt	eq
 80086c4:	1809      	addeq	r1, r1, r0
 80086c6:	6021      	streq	r1, [r4, #0]
 80086c8:	6054      	str	r4, [r2, #4]
 80086ca:	e7ca      	b.n	8008662 <_free_r+0x22>
 80086cc:	bd38      	pop	{r3, r4, r5, pc}
 80086ce:	bf00      	nop
 80086d0:	24004b5c 	.word	0x24004b5c

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
